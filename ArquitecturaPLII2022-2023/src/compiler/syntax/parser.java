
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 15 20:27:19 GMT 2023
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 15 20:27:19 GMT 2023
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\052\002\000\002\002" +
    "\004\000\002\003\006\000\002\003\005\000\002\013\004" +
    "\000\002\013\003\000\002\005\002\000\002\014\006\000" +
    "\002\015\004\000\002\015\003\000\002\016\011\000\002" +
    "\017\003\000\002\017\003\000\002\020\004\000\002\020" +
    "\003\000\002\021\005\000\002\021\005\000\002\022\005" +
    "\000\002\022\003\000\002\023\003\000\002\023\005\000" +
    "\002\006\004\000\002\006\003\000\002\007\013\000\002" +
    "\007\013\000\002\007\014\000\002\007\014\000\002\010" +
    "\003\000\002\010\003\000\002\011\003\000\002\011\005" +
    "\000\002\012\004\000\002\012\004\000\002\004\012\000" +
    "\002\004\013\000\002\024\003\000\002\024\003\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\004\000\002\024\004\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\003\000\002\024\003\000" +
    "\002\025\006\000\002\026\006\000\002\026\005\000\002" +
    "\045\003\000\002\045\005\000\002\027\006\000\002\027" +
    "\005\000\002\030\004\000\002\030\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\051" +
    "\004\000\002\051\005\000\002\032\005\000\002\033\006" +
    "\000\002\034\003\000\002\034\003\000\002\035\006\000" +
    "\002\036\011\000\002\036\007\000\002\037\012\000\002" +
    "\040\004\000\002\040\003\000\002\041\010\000\002\042" +
    "\007\000\002\042\003\000\002\043\007\000\002\044\004" +
    "\000\002\046\007\000\002\046\007\000\002\047\003\000" +
    "\002\047\003\000\002\050\003\000\002\050\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\014\027\000\031\000\043\000\044\000\045" +
    "\000\001\002\000\004\002\317\001\002\000\014\027\007" +
    "\031\ufffa\043\ufffa\044\ufffa\045\ufffa\001\002\000\004\002" +
    "\uffff\001\002\000\004\045\314\001\002\000\014\027\007" +
    "\031\ufffa\043\ufffa\044\ufffa\045\ufffa\001\002\000\012\031" +
    "\ufffa\043\015\044\ufffa\045\ufffa\001\002\000\012\031\ufffb" +
    "\043\ufffb\044\ufffb\045\ufffb\001\002\000\010\031\037\044" +
    "\035\045\031\001\002\000\030\012\ufffa\031\ufffa\032\ufffa" +
    "\033\ufffa\034\ufffa\035\ufffa\040\ufffa\041\ufffa\043\015\044" +
    "\ufffa\045\ufffa\001\002\000\004\031\017\001\002\000\026" +
    "\012\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\040" +
    "\ufff7\041\ufff7\044\ufff7\045\ufff7\001\002\000\004\045\020" +
    "\001\002\000\004\010\021\001\002\000\006\045\023\046" +
    "\022\001\002\000\004\011\ufff5\001\002\000\004\011\ufff4" +
    "\001\002\000\004\011\025\001\002\000\004\016\026\001" +
    "\002\000\030\012\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6" +
    "\035\ufff6\040\ufff6\041\ufff6\043\ufff6\044\ufff6\045\ufff6\001" +
    "\002\000\026\012\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8" +
    "\035\ufff8\040\ufff8\041\ufff8\044\ufff8\045\ufff8\001\002\000" +
    "\026\012\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2" +
    "\040\ufff2\041\ufff2\044\ufff2\045\ufff2\001\002\000\004\045" +
    "\045\001\002\000\004\002\uffea\001\002\000\006\031\311" +
    "\044\035\001\002\000\004\002\ufffd\001\002\000\006\037" +
    "\264\045\263\001\002\000\010\031\037\044\035\045\031" +
    "\001\002\000\004\045\041\001\002\000\004\016\261\001" +
    "\002\000\012\014\050\016\uffed\017\uffed\024\046\001\002" +
    "\000\006\016\uffee\017\043\001\002\000\004\045\045\001" +
    "\002\000\004\016\uffef\001\002\000\010\016\uffed\017\uffed" +
    "\024\046\001\002\000\004\046\047\001\002\000\006\016" +
    "\uffec\017\uffec\001\002\000\010\015\ufffa\031\055\045\051" +
    "\001\002\000\004\045\260\001\002\000\006\015\uffe3\017" +
    "\256\001\002\000\004\015\060\001\002\000\004\015\uffe4" +
    "\001\002\000\004\045\057\001\002\000\004\015\uffe5\001" +
    "\002\000\006\015\uffe1\017\uffe1\001\002\000\004\012\061" +
    "\001\002\000\026\012\ufffa\031\ufffa\032\ufffa\033\ufffa\034" +
    "\ufffa\035\ufffa\040\ufffa\041\ufffa\043\015\045\ufffa\001\002" +
    "\000\024\012\063\031\107\032\100\033\101\034\071\035" +
    "\110\040\065\041\103\045\105\001\002\000\024\012\063" +
    "\031\107\032\100\033\101\034\071\035\110\040\065\041" +
    "\103\045\105\001\002\000\026\012\uffc3\013\uffc3\032\uffc3" +
    "\033\uffc3\034\uffc3\035\uffc3\040\uffc3\041\uffc3\042\uffc3\045" +
    "\uffc3\001\002\000\014\014\123\016\246\021\132\045\133" +
    "\046\126\001\002\000\026\012\uffc4\013\uffc4\032\uffc4\033" +
    "\uffc4\034\uffc4\035\uffc4\040\uffc4\041\uffc4\042\uffc4\045\uffc4" +
    "\001\002\000\024\012\063\031\107\032\100\033\101\034" +
    "\071\035\110\040\065\041\103\045\105\001\002\000\006" +
    "\023\uffb9\024\uffb9\001\002\000\004\014\216\001\002\000" +
    "\026\012\uffc6\013\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6" +
    "\040\uffc6\041\uffc6\042\uffc6\045\uffc6\001\002\000\004\016" +
    "\215\001\002\000\006\023\207\024\210\001\002\000\026" +
    "\012\uffbf\013\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\040" +
    "\uffbf\041\uffbf\042\uffbf\045\uffbf\001\002\000\026\012\uffc7" +
    "\013\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\040\uffc7\041" +
    "\uffc7\042\uffc7\045\uffc7\001\002\000\024\012\uffc9\013\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\035\uffc9\040\uffc9\041\uffc9\045" +
    "\uffc9\001\002\000\004\014\201\001\002\000\004\014\173" +
    "\001\002\000\026\012\uffc0\013\uffc0\032\uffc0\033\uffc0\034" +
    "\uffc0\035\uffc0\040\uffc0\041\uffc0\042\uffc0\045\uffc0\001\002" +
    "\000\004\014\165\001\002\000\026\012\uffc1\013\uffc1\032" +
    "\uffc1\033\uffc1\034\uffc1\035\uffc1\040\uffc1\041\uffc1\042\uffc1" +
    "\045\uffc1\001\002\000\016\005\121\010\117\014\120\023" +
    "\uffba\024\uffba\045\045\001\002\000\026\012\uffc2\013\uffc2" +
    "\032\uffc2\033\uffc2\034\uffc2\035\uffc2\040\uffc2\041\uffc2\042" +
    "\uffc2\045\uffc2\001\002\000\004\045\045\001\002\000\004" +
    "\014\157\001\002\000\026\012\uffc5\013\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\040\uffc5\041\uffc5\042\uffc5\045\uffc5" +
    "\001\002\000\026\012\uffc8\013\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\035\uffc8\040\uffc8\041\uffc8\042\uffc8\045\uffc8\001\002" +
    "\000\024\012\063\013\116\032\100\033\101\034\071\035" +
    "\110\040\065\041\103\045\115\001\002\000\024\012\uffca" +
    "\013\uffca\032\uffca\033\uffca\034\uffca\035\uffca\040\uffca\041" +
    "\uffca\045\uffca\001\002\000\014\005\121\010\117\014\120" +
    "\023\uffba\024\uffba\001\002\000\006\031\uffe9\044\uffe9\001" +
    "\002\000\012\014\123\021\132\045\133\046\126\001\002" +
    "\000\014\014\123\015\125\021\132\045\133\046\126\001" +
    "\002\000\004\016\122\001\002\000\026\012\uffbc\013\uffbc" +
    "\032\uffbc\033\uffbc\034\uffbc\035\uffbc\040\uffbc\041\uffbc\042" +
    "\uffbc\045\uffbc\001\002\000\012\014\123\021\132\045\133" +
    "\046\126\001\002\000\026\004\uffd3\005\uffd3\006\uffd3\007" +
    "\uffd3\011\uffd3\015\uffd3\016\uffd3\017\uffd3\022\uffd3\025\uffd3" +
    "\001\002\000\026\004\uffcf\005\uffcf\006\uffcf\007\uffcf\011" +
    "\uffcf\015\uffcf\016\uffcf\017\uffcf\022\uffcf\025\uffcf\001\002" +
    "\000\026\004\uffdd\005\uffdd\006\uffdd\007\uffdd\011\uffdd\015" +
    "\uffdd\016\uffdd\017\uffdd\022\uffdd\025\uffdd\001\002\000\026" +
    "\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011\uffd2\015\uffd2\016" +
    "\uffd2\017\uffd2\022\uffd2\025\uffd2\001\002\000\022\004\136" +
    "\005\142\006\135\007\141\015\uffce\017\151\022\137\025" +
    "\140\001\002\000\004\015\150\001\002\000\012\014\123" +
    "\021\132\045\133\046\126\001\002\000\032\004\uffdc\005" +
    "\uffdc\006\uffdc\007\uffdc\010\117\011\uffdc\014\120\015\uffdc" +
    "\016\uffdc\017\uffdc\022\uffdc\025\uffdc\001\002\000\026\004" +
    "\136\005\uffd7\006\135\007\141\011\uffd7\015\uffd7\016\uffd7" +
    "\017\uffd7\022\137\025\140\001\002\000\012\014\123\021" +
    "\132\045\133\046\126\001\002\000\012\014\123\021\132" +
    "\045\133\046\126\001\002\000\012\014\123\021\132\045" +
    "\133\046\126\001\002\000\012\014\123\021\132\045\133" +
    "\046\126\001\002\000\012\014\123\021\132\045\133\046" +
    "\126\001\002\000\026\004\uffd8\005\uffd8\006\uffd8\007\uffd8" +
    "\011\uffd8\015\uffd8\016\uffd8\017\uffd8\022\uffd8\025\uffd8\001" +
    "\002\000\026\004\uffd4\005\uffd4\006\uffd4\007\uffd4\011\uffd4" +
    "\015\uffd4\016\uffd4\017\uffd4\022\uffd4\025\uffd4\001\002\000" +
    "\026\004\uffd6\005\uffd6\006\uffd6\007\141\011\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\022\137\025\uffd6\001\002\000\026\004" +
    "\uffd5\005\uffd5\006\uffd5\007\141\011\uffd5\015\uffd5\016\uffd5" +
    "\017\uffd5\022\uffd5\025\uffd5\001\002\000\026\004\uffda\005" +
    "\uffda\006\uffda\007\141\011\uffda\015\uffda\016\uffda\017\uffda" +
    "\022\137\025\140\001\002\000\026\004\136\005\uffd9\006" +
    "\uffd9\007\141\011\uffd9\015\uffd9\016\uffd9\017\uffd9\022\137" +
    "\025\140\001\002\000\026\004\uffd0\005\uffd0\006\uffd0\007" +
    "\uffd0\011\uffd0\015\uffd0\016\uffd0\017\uffd0\022\uffd0\025\uffd0" +
    "\001\002\000\012\014\123\021\132\045\133\046\126\001" +
    "\002\000\004\015\uffcd\001\002\000\020\004\136\005\142" +
    "\006\135\007\141\015\154\022\137\025\140\001\002\000" +
    "\026\004\uffdb\005\uffdb\006\uffdb\007\uffdb\011\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\022\uffdb\025\uffdb\001\002\000\020\004" +
    "\136\005\142\006\135\007\141\011\156\022\137\025\140" +
    "\001\002\000\032\004\uffd1\005\uffd1\006\uffd1\007\uffd1\011" +
    "\uffd1\015\uffd1\016\uffd1\017\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\001\002\000\012\014\123\021\132\045\133\046" +
    "\126\001\002\000\020\004\136\005\142\006\135\007\141" +
    "\015\161\022\137\025\140\001\002\000\022\012\063\032" +
    "\100\033\101\034\071\035\110\040\065\041\103\045\115" +
    "\001\002\000\026\012\uffaf\013\uffaf\032\uffaf\033\uffaf\034" +
    "\uffaf\035\uffaf\040\uffaf\041\uffaf\042\uffaf\045\uffaf\001\002" +
    "\000\004\016\164\001\002\000\026\012\ufff0\031\ufff0\032" +
    "\ufff0\033\ufff0\034\ufff0\035\ufff0\040\ufff0\041\ufff0\044\ufff0" +
    "\045\ufff0\001\002\000\012\014\123\021\132\045\133\046" +
    "\126\001\002\000\020\004\136\005\142\006\135\007\141" +
    "\015\167\022\137\025\140\001\002\000\022\012\063\032" +
    "\100\033\101\034\071\035\110\040\065\041\103\045\115" +
    "\001\002\000\026\012\uffb6\013\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\035\uffb6\040\uffb6\041\uffb6\042\171\045\uffb6\001\002" +
    "\000\022\012\063\032\100\033\101\034\071\035\110\040" +
    "\065\041\103\045\115\001\002\000\026\012\uffb7\013\uffb7" +
    "\032\uffb7\033\uffb7\034\uffb7\035\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\045\uffb7\001\002\000\014\014\123\015\ufffa\021\132" +
    "\045\133\046\126\001\002\000\004\015\177\001\002\000" +
    "\020\004\136\005\142\006\135\007\141\015\uffa8\022\137" +
    "\025\140\001\002\000\004\015\uffa9\001\002\000\004\016" +
    "\200\001\002\000\026\012\uffac\013\uffac\032\uffac\033\uffac" +
    "\034\uffac\035\uffac\040\uffac\041\uffac\042\uffac\045\uffac\001" +
    "\002\000\006\015\ufffa\047\203\001\002\000\004\015\205" +
    "\001\002\000\004\015\uffaa\001\002\000\004\015\uffab\001" +
    "\002\000\004\016\206\001\002\000\026\012\uffad\013\uffad" +
    "\032\uffad\033\uffad\034\uffad\035\uffad\040\uffad\041\uffad\042" +
    "\uffad\045\uffad\001\002\000\012\014\123\021\132\045\133" +
    "\046\126\001\002\000\012\014\123\021\132\045\133\046" +
    "\126\001\002\000\020\004\136\005\142\006\135\007\141" +
    "\016\212\022\137\025\140\001\002\000\026\012\uffbb\013" +
    "\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\040\uffbb\041\uffbb" +
    "\042\uffbb\045\uffbb\001\002\000\020\004\136\005\142\006" +
    "\135\007\141\016\214\022\137\025\140\001\002\000\026" +
    "\012\uffb8\013\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\040" +
    "\uffb8\041\uffb8\042\uffb8\045\uffb8\001\002\000\026\012\uffae" +
    "\013\uffae\032\uffae\033\uffae\034\uffae\035\uffae\040\uffae\041" +
    "\uffae\042\uffae\045\uffae\001\002\000\012\014\123\021\132" +
    "\045\133\046\126\001\002\000\020\004\136\005\142\006" +
    "\135\007\141\015\220\022\137\025\140\001\002\000\004" +
    "\012\221\001\002\000\004\026\224\001\002\000\010\013" +
    "\ufffa\026\224\036\233\001\002\000\010\013\uffb3\026\uffb3" +
    "\036\uffb3\001\002\000\004\046\225\001\002\000\004\020" +
    "\226\001\002\000\004\012\063\001\002\000\004\030\230" +
    "\001\002\000\004\016\231\001\002\000\010\013\uffb2\026" +
    "\uffb2\036\uffb2\001\002\000\004\013\242\001\002\000\004" +
    "\020\236\001\002\000\010\013\uffb4\026\uffb4\036\uffb4\001" +
    "\002\000\004\013\uffb0\001\002\000\004\012\063\001\002" +
    "\000\004\030\240\001\002\000\004\016\241\001\002\000" +
    "\004\013\uffb1\001\002\000\026\012\uffb5\013\uffb5\032\uffb5" +
    "\033\uffb5\034\uffb5\035\uffb5\040\uffb5\041\uffb5\042\uffb5\045" +
    "\uffb5\001\002\000\026\012\ufff3\031\ufff3\032\ufff3\033\ufff3" +
    "\034\ufff3\035\ufff3\040\ufff3\041\ufff3\044\ufff3\045\ufff3\001" +
    "\002\000\024\012\063\013\245\032\100\033\101\034\071" +
    "\035\110\040\065\041\103\045\115\001\002\000\006\031" +
    "\uffe7\044\uffe7\001\002\000\026\012\uffbe\013\uffbe\032\uffbe" +
    "\033\uffbe\034\uffbe\035\uffbe\040\uffbe\041\uffbe\042\uffbe\045" +
    "\uffbe\001\002\000\020\004\136\005\142\006\135\007\141" +
    "\016\250\022\137\025\140\001\002\000\026\012\uffbd\013" +
    "\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\040\uffbd\041\uffbd" +
    "\042\uffbd\045\uffbd\001\002\000\024\012\063\031\107\032" +
    "\100\033\101\034\071\035\110\040\065\041\103\045\105" +
    "\001\002\000\024\012\063\013\253\032\100\033\101\034" +
    "\071\035\110\040\065\041\103\045\115\001\002\000\030" +
    "\012\uffcb\013\uffcb\030\uffcb\032\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\040\uffcb\041\uffcb\042\uffcb\045\uffcb\001\002\000\024" +
    "\012\063\013\255\032\100\033\101\034\071\035\110\040" +
    "\065\041\103\045\115\001\002\000\030\012\uffcc\013\uffcc" +
    "\030\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\045\uffcc\001\002\000\006\031\055\045\051" +
    "\001\002\000\004\015\uffe2\001\002\000\006\015\uffe0\017" +
    "\uffe0\001\002\000\026\012\ufff1\031\ufff1\032\ufff1\033\ufff1" +
    "\034\ufff1\035\ufff1\040\ufff1\041\ufff1\044\ufff1\045\ufff1\001" +
    "\002\000\004\002\ufffe\001\002\000\004\014\276\001\002" +
    "\000\004\014\265\001\002\000\004\015\266\001\002\000" +
    "\004\012\267\001\002\000\026\012\ufffa\031\ufffa\032\ufffa" +
    "\033\ufffa\034\ufffa\035\ufffa\040\ufffa\041\ufffa\043\015\045" +
    "\ufffa\001\002\000\024\012\063\031\107\032\100\033\101" +
    "\034\071\035\110\040\065\041\103\045\105\001\002\000" +
    "\024\012\063\031\107\032\100\033\101\034\071\035\110" +
    "\040\065\041\103\045\105\001\002\000\024\012\063\013" +
    "\273\032\100\033\101\034\071\035\110\040\065\041\103" +
    "\045\115\001\002\000\004\002\uffdf\001\002\000\024\012" +
    "\063\013\275\032\100\033\101\034\071\035\110\040\065" +
    "\041\103\045\115\001\002\000\004\002\uffde\001\002\000" +
    "\010\015\ufffa\031\055\045\051\001\002\000\004\015\300" +
    "\001\002\000\004\012\301\001\002\000\026\012\ufffa\031" +
    "\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\040\ufffa\041\ufffa" +
    "\043\015\045\ufffa\001\002\000\024\012\063\031\107\032" +
    "\100\033\101\034\071\035\110\040\065\041\103\045\105" +
    "\001\002\000\024\012\063\031\107\032\100\033\101\034" +
    "\071\035\110\040\065\041\103\045\105\001\002\000\024" +
    "\012\063\013\305\032\100\033\101\034\071\035\110\040" +
    "\065\041\103\045\115\001\002\000\006\031\uffe8\044\uffe8" +
    "\001\002\000\024\012\063\013\307\032\100\033\101\034" +
    "\071\035\110\040\065\041\103\045\115\001\002\000\006" +
    "\031\uffe6\044\uffe6\001\002\000\004\002\uffeb\001\002\000" +
    "\004\045\312\001\002\000\004\014\050\001\002\000\012" +
    "\031\ufffc\043\ufffc\044\ufffc\045\ufffc\001\002\000\004\046" +
    "\315\001\002\000\004\016\316\001\002\000\014\027\ufff9" +
    "\031\ufff9\043\ufff9\044\ufff9\045\ufff9\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\006\002\003\052\004\001\001\000\002\001" +
    "\001\000\012\003\005\005\011\013\010\014\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\011\013" +
    "\312\014\007\001\001\000\010\005\015\015\012\016\013" +
    "\001\001\000\002\001\001\000\014\004\031\006\033\007" +
    "\032\020\035\021\027\001\001\000\010\005\015\015\026" +
    "\016\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\162\023\041\001\001\000\002\001" +
    "\001\000\010\004\031\006\307\007\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\031\006\261\007" +
    "\032\021\242\001\001\000\006\022\037\023\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\043\023\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\053\010\052\011\055\012\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\015\015\061\016\013\001\001\000" +
    "\044\020\066\021\027\025\067\026\072\027\074\030\112" +
    "\031\076\032\075\033\071\034\073\035\110\036\065\037" +
    "\063\043\105\044\103\046\101\051\111\001\001\000\044" +
    "\020\250\021\027\025\067\026\072\027\074\030\251\031" +
    "\076\032\075\033\071\034\073\035\110\036\065\037\063" +
    "\043\105\044\103\046\101\051\111\001\001\000\002\001" +
    "\001\000\010\024\246\025\123\026\126\001\001\000\002" +
    "\001\001\000\042\021\242\025\067\026\072\027\074\030" +
    "\243\031\076\032\075\033\071\034\073\035\110\036\065" +
    "\037\063\043\105\044\103\046\101\051\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\162\023\041\001\001\000\002\001\001\000\006" +
    "\022\037\023\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\025\067\026\072\027\074" +
    "\031\113\032\075\033\071\034\073\035\110\036\065\037" +
    "\063\043\105\044\103\046\101\051\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\024" +
    "\154\025\123\026\126\001\001\000\012\024\127\025\123" +
    "\026\126\045\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\152\025\123\026\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\024\133" +
    "\025\123\026\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\146\025\123\026\126\001\001\000\010" +
    "\024\145\025\123\026\126\001\001\000\010\024\144\025" +
    "\123\026\126\001\001\000\010\024\143\025\123\026\126" +
    "\001\001\000\010\024\142\025\123\026\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\024\127\025\123\026\126\045\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\024\157\025\123" +
    "\026\126\001\001\000\002\001\001\000\036\025\067\026" +
    "\072\027\074\031\161\032\075\033\071\034\073\035\110" +
    "\036\065\037\063\043\105\044\103\046\101\051\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\024\165\025\123\026\126\001\001\000\002\001" +
    "\001\000\036\025\067\026\072\027\074\031\167\032\075" +
    "\033\071\034\073\035\110\036\065\037\063\043\105\044" +
    "\103\046\101\051\111\001\001\000\002\001\001\000\036" +
    "\025\067\026\072\027\074\031\171\032\075\033\071\034" +
    "\073\035\110\036\065\037\063\043\105\044\103\046\101" +
    "\051\111\001\001\000\002\001\001\000\014\005\175\024" +
    "\174\025\123\026\126\050\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\203\047\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\024\212\025\123\026\126" +
    "\001\001\000\010\024\210\025\123\026\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\024\216\025\123\026" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\040\221\041\222\001\001\000\010\005\234\041\233\042" +
    "\231\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\236\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\025" +
    "\067\026\072\027\074\031\113\032\075\033\071\034\073" +
    "\035\110\036\065\037\063\043\105\044\103\046\101\051" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\021\242\025\067\026" +
    "\072\027\074\030\253\031\076\032\075\033\071\034\073" +
    "\035\110\036\065\037\063\043\105\044\103\046\101\051" +
    "\111\001\001\000\036\025\067\026\072\027\074\031\113" +
    "\032\075\033\071\034\073\035\110\036\065\037\063\043" +
    "\105\044\103\046\101\051\111\001\001\000\002\001\001" +
    "\000\036\025\067\026\072\027\074\031\113\032\075\033" +
    "\071\034\073\035\110\036\065\037\063\043\105\044\103" +
    "\046\101\051\111\001\001\000\002\001\001\000\006\011" +
    "\256\012\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\015\015\267\016\013\001\001\000\044\020\270\021" +
    "\027\025\067\026\072\027\074\030\271\031\076\032\075" +
    "\033\071\034\073\035\110\036\065\037\063\043\105\044" +
    "\103\046\101\051\111\001\001\000\042\021\242\025\067" +
    "\026\072\027\074\030\273\031\076\032\075\033\071\034" +
    "\073\035\110\036\065\037\063\043\105\044\103\046\101" +
    "\051\111\001\001\000\036\025\067\026\072\027\074\031" +
    "\113\032\075\033\071\034\073\035\110\036\065\037\063" +
    "\043\105\044\103\046\101\051\111\001\001\000\002\001" +
    "\001\000\036\025\067\026\072\027\074\031\113\032\075" +
    "\033\071\034\073\035\110\036\065\037\063\043\105\044" +
    "\103\046\101\051\111\001\001\000\002\001\001\000\012" +
    "\005\053\010\276\011\055\012\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\015\015\301\016\013" +
    "\001\001\000\044\020\302\021\027\025\067\026\072\027" +
    "\074\030\303\031\076\032\075\033\071\034\073\035\110" +
    "\036\065\037\063\043\105\044\103\046\101\051\111\001" +
    "\001\000\042\021\242\025\067\026\072\027\074\030\305" +
    "\031\076\032\075\033\071\034\073\035\110\036\065\037" +
    "\063\043\105\044\103\046\101\051\111\001\001\000\036" +
    "\025\067\026\072\027\074\031\113\032\075\033\071\034" +
    "\073\035\110\036\065\037\063\043\105\044\103\046\101" +
    "\051\111\001\001\000\002\001\001\000\036\025\067\026" +
    "\072\027\074\031\113\032\075\033\071\034\073\035\110" +
    "\036\065\037\063\043\105\044\103\046\101\051\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // opcionesEscribeEnt ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesEscribeEnt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // opcionesEscribeEnt ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesEscribeEnt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // opcionesEscribe ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesEscribe",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // opcionesEscribe ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesEscribe",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentenciaSalida ::= ESCRIBE_ENT OPEN_KEY opcionesEscribeEnt CLOSE_KEY SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSalida",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sentenciaSalida ::= ESCRIBE OPEN_KEY opcionesEscribe CLOSE_KEY SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSalida",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentenciaLlamadaFuncion ::= llamadaFuncion SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaLlamadaFuncion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentenciaMientras ::= MIENTRAS OPEN_KEY expresion CLOSE_KEY sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaMientras",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // porDefecto ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("porDefecto",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // porDefecto ::= PORDEFECTO TWO_POINTS bloque CORTE SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("porDefecto",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // casoAlt ::= CASO NUMERO TWO_POINTS bloque CORTE SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casoAlt",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // casosAlternativa ::= casoAlt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casosAlternativa",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // casosAlternativa ::= casosAlternativa casoAlt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casosAlternativa",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentenciaAlternativas ::= ALTENATIVAS OPEN_KEY expresion CLOSE_KEY OPEN_PARENTHESIS casosAlternativa porDefecto CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAlternativas",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentenciaSi ::= SI OPEN_KEY expresion CLOSE_KEY sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSi",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentenciaSi ::= SI OPEN_KEY expresion CLOSE_KEY sentencia SINO sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSi",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentenciaAsignacionSuma ::= ref ASSIGN_SUMA expresion SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacionSuma",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ref ::= accesoVector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ref ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentenciaAsignacion ::= ref ASSIGN expresion SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentenciaIncremento ::= IDENTIFICADOR AUTO_INCREMENTO SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIncremento",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentenciaDevuelve ::= DEVUELVE expresion SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaDevuelve",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentenciaDevuelve ::= DEVUELVE SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaDevuelve",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentencia ::= bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentencia ::= sentenciaSalida 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentencia ::= sentenciaLlamadaFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentencia ::= sentenciaMientras 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentencia ::= sentenciaAlternativas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentencia ::= sentenciaSi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentencia ::= sentenciaAsignacionSuma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentencia ::= sentenciaAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentencia ::= sentenciaIncremento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentencia ::= sentenciaDevuelve 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // listadoSentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoSentencias",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // listadoSentencias ::= listadoSentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoSentencias",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bloque ::= OPEN_PARENTHESIS listadoSentencias CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bloque ::= OPEN_PARENTHESIS seccionVariables listadoSentencias CLOSE_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametros ::= expresion COLON parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametros ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // llamadaFuncion ::= IDENTIFICADOR OPEN_KEY CLOSE_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // llamadaFuncion ::= IDENTIFICADOR OPEN_KEY parametros CLOSE_KEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // accesoVector ::= IDENTIFICADOR OPEN_BRACKET expresion CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoVector",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= llamadaFuncion 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= accesoVector 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= expresion AND_LOGICA expresion 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= expresion EQUAL expresion 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= expresion LOWER_THAN expresion 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= NEGACION expresion 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= expresion AUTO_INCREMENTO 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= expresion MULT expresion 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= expresion PLUS expresion 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= OPEN_KEY expresion CLOSE_KEY 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= NUMERO 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // funcionPrincipal ::= VACIO principal OPEN_KEY CLOSE_KEY OPEN_PARENTHESIS seccionTipos seccionVariables listadoSentencias CLOSE_PARENTHESIS 
            {
              FuncionPrincipal RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionPrincipal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funcionPrincipal ::= VACIO principal OPEN_KEY CLOSE_KEY OPEN_PARENTHESIS seccionTipos listadoSentencias CLOSE_PARENTHESIS 
            {
              FuncionPrincipal RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionPrincipal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parametro ::= IDENTIFICADOR IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parametro ::= ENTERO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracionParametros ::= parametro COLON declaracionParametros 
            {
              DeclaracionParametros RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionParametros",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracionParametros ::= parametro 
            {
              DeclaracionParametros RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionParametros",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // seccionParametros ::= epsilon 
            {
              SeccionParametros RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionParametros",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // seccionParametros ::= declaracionParametros 
            {
              SeccionParametros RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionParametros",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // funcion ::= VACIO IDENTIFICADOR OPEN_KEY seccionParametros CLOSE_KEY OPEN_PARENTHESIS seccionTipos seccionVariables listadoSentencias CLOSE_PARENTHESIS 
            {
              Funcion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // funcion ::= ENTERO IDENTIFICADOR OPEN_KEY seccionParametros CLOSE_KEY OPEN_PARENTHESIS seccionTipos seccionVariables listadoSentencias CLOSE_PARENTHESIS 
            {
              Funcion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // funcion ::= VACIO IDENTIFICADOR OPEN_KEY seccionParametros CLOSE_KEY OPEN_PARENTHESIS seccionTipos listadoSentencias CLOSE_PARENTHESIS 
            {
              Funcion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // funcion ::= ENTERO IDENTIFICADOR OPEN_KEY seccionParametros CLOSE_KEY OPEN_PARENTHESIS seccionTipos listadoSentencias CLOSE_PARENTHESIS 
            {
              Funcion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // seccionFunciones ::= funcionPrincipal 
            {
              SeccionFunciones RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionFunciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // seccionFunciones ::= funcion seccionFunciones 
            {
              SeccionFunciones RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionFunciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // id ::= IDENTIFICADOR ASSIGN NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // id ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // listadoIDs ::= id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIDs",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // listadoIDs ::= id COLON listadoIDs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIDs",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracionVariable ::= IDENTIFICADOR listadoIDs SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracionVariable ::= ENTERO listadoIDs SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // seccionVariables ::= declaracionVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionVariables",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // seccionVariables ::= seccionVariables declaracionVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionVariables",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tamTipo ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tamTipo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tamTipo ::= NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tamTipo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracionTipo ::= TIPO ENTERO IDENTIFICADOR OPEN_BRACKET tamTipo CLOSE_BRACKET SEMI_COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // seccionTipos ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionTipos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // seccionTipos ::= declaracionTipo seccionTipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionTipos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracionConstante ::= CONSTANTE IDENTIFICADOR NUMERO SEMI_COLON 
            {
              DeclaracionConstante RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstante",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // epsilon ::= 
            {
              Epsilon RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("epsilon",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // seccionConstantes ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionConstantes",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // seccionConstantes ::= declaracionConstante seccionConstantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionConstantes",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // axiom ::= seccionConstantes seccionTipos seccionFunciones 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= seccionConstantes seccionTipos seccionVariables seccionFunciones 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Program RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Program) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   		
  		// No modificar esta estructura, aunque se pueden añadir más acciones semánticas
  		
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);

  		// En caso de no comentarse las dos sentencias anteriores se puede generar una excepcion
  		// en las llamadas a cupTest si el compilador no está completo. Esto es debido a que 
  		// aún no se tendrá implementada la generación de código intermedio ni final.
  		// Para la entrega final deberán descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
  		
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Program RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

