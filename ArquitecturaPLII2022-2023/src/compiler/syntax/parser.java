
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 22 06:44:18 GMT 2023
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 22 06:44:18 GMT 2023
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\055\002\000\002\002" +
    "\004\000\002\056\002\000\002\003\004\000\002\004\006" +
    "\000\002\004\005\000\002\014\004\000\002\014\003\000" +
    "\002\006\002\000\002\015\006\000\002\016\004\000\002" +
    "\016\003\000\002\017\011\000\002\020\003\000\002\020" +
    "\003\000\002\021\004\000\002\021\003\000\002\022\005" +
    "\000\002\022\005\000\002\023\005\000\002\023\003\000" +
    "\002\024\003\000\002\024\005\000\002\007\004\000\002" +
    "\007\003\000\002\057\002\000\002\005\012\000\002\060" +
    "\002\000\002\010\013\000\002\061\002\000\002\010\013" +
    "\000\002\053\004\000\002\053\005\000\002\011\003\000" +
    "\002\011\003\000\002\012\003\000\002\012\005\000\002" +
    "\013\004\000\002\013\004\000\002\025\003\000\002\025" +
    "\003\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\004\000\002\025\004\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\003\000\002" +
    "\025\003\000\002\026\006\000\002\027\006\000\002\027" +
    "\005\000\002\046\003\000\002\046\005\000\002\062\002" +
    "\000\002\030\006\000\002\054\003\000\002\054\004\000" +
    "\002\031\004\000\002\031\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\052\004\000" +
    "\002\052\005\000\002\033\005\000\002\034\006\000\002" +
    "\035\003\000\002\035\003\000\002\036\006\000\002\037" +
    "\011\000\002\037\007\000\002\040\012\000\002\041\004" +
    "\000\002\041\003\000\002\042\010\000\002\043\007\000" +
    "\002\043\003\000\002\044\007\000\002\045\004\000\002" +
    "\047\007\000\002\047\007\000\002\050\003\000\002\050" +
    "\003\000\002\051\003\000\002\051\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\014\027\000\031\000\043\000\044\000\045" +
    "\000\001\002\000\004\002\315\001\002\000\014\027\ufffe" +
    "\031\ufffe\043\ufffe\044\ufffe\045\ufffe\001\002\000\004\002" +
    "\uffff\001\002\000\014\027\011\031\ufff8\043\ufff8\044\ufff8" +
    "\045\ufff8\001\002\000\004\002\ufffd\001\002\000\004\045" +
    "\312\001\002\000\014\027\011\031\ufff8\043\ufff8\044\ufff8" +
    "\045\ufff8\001\002\000\012\031\ufff8\043\017\044\ufff8\045" +
    "\ufff8\001\002\000\012\031\ufff9\043\ufff9\044\ufff9\045\ufff9" +
    "\001\002\000\010\031\041\044\037\045\033\001\002\000" +
    "\030\012\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8" +
    "\040\ufff8\041\ufff8\043\017\044\ufff8\045\ufff8\001\002\000" +
    "\004\031\021\001\002\000\026\012\ufff5\031\ufff5\032\ufff5" +
    "\033\ufff5\034\ufff5\035\ufff5\040\ufff5\041\ufff5\044\ufff5\045" +
    "\ufff5\001\002\000\004\045\022\001\002\000\004\010\023" +
    "\001\002\000\006\045\025\046\024\001\002\000\004\011" +
    "\ufff3\001\002\000\004\011\ufff2\001\002\000\004\011\027" +
    "\001\002\000\004\016\030\001\002\000\030\012\ufff4\031" +
    "\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\040\ufff4\041\ufff4" +
    "\043\ufff4\044\ufff4\045\ufff4\001\002\000\026\012\ufff6\031" +
    "\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\040\ufff6\041\ufff6" +
    "\044\ufff6\045\ufff6\001\002\000\026\012\ufff0\031\ufff0\032" +
    "\ufff0\033\ufff0\034\ufff0\035\ufff0\040\ufff0\041\ufff0\044\ufff0" +
    "\045\ufff0\001\002\000\004\045\047\001\002\000\004\002" +
    "\uffe8\001\002\000\006\031\307\044\037\001\002\000\004" +
    "\002\ufffb\001\002\000\006\037\270\045\267\001\002\000" +
    "\010\031\041\044\037\045\033\001\002\000\004\045\043" +
    "\001\002\000\004\016\265\001\002\000\012\014\052\016" +
    "\uffeb\017\uffeb\024\050\001\002\000\006\016\uffec\017\045" +
    "\001\002\000\004\045\047\001\002\000\004\016\uffed\001" +
    "\002\000\010\016\uffeb\017\uffeb\024\050\001\002\000\004" +
    "\046\051\001\002\000\006\016\uffea\017\uffea\001\002\000" +
    "\010\015\ufff8\031\060\045\053\001\002\000\004\045\264" +
    "\001\002\000\006\015\uffdd\017\262\001\002\000\004\015" +
    "\062\001\002\000\004\015\uffdf\001\002\000\004\015\uffde" +
    "\001\002\000\004\045\061\001\002\000\006\015\uffdb\017" +
    "\uffdb\001\002\000\004\012\063\001\002\000\026\012\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\040\uffe5\041" +
    "\uffe5\043\uffe5\045\uffe5\001\002\000\026\012\ufff8\031\ufff8" +
    "\032\ufff8\033\ufff8\034\ufff8\035\ufff8\040\ufff8\041\ufff8\043" +
    "\017\045\ufff8\001\002\000\004\013\261\001\002\000\024" +
    "\012\067\031\113\032\104\033\106\034\075\035\114\040" +
    "\072\041\107\045\111\001\002\000\024\012\uffc8\031\uffc8" +
    "\032\uffc8\033\uffc8\034\uffc8\035\uffc8\040\uffc8\041\uffc8\045" +
    "\uffc8\001\002\000\026\012\uffbd\013\uffbd\032\uffbd\033\uffbd" +
    "\034\uffbd\035\uffbd\040\uffbd\041\uffbd\042\uffbd\045\uffbd\001" +
    "\002\000\026\012\uffbe\013\uffbe\032\uffbe\033\uffbe\034\uffbe" +
    "\035\uffbe\040\uffbe\041\uffbe\042\uffbe\045\uffbe\001\002\000" +
    "\014\014\126\016\250\021\135\045\136\046\131\001\002" +
    "\000\024\012\067\031\113\032\104\033\106\034\075\035" +
    "\114\040\072\041\107\045\111\001\002\000\006\023\uffb3" +
    "\024\uffb3\001\002\000\004\014\221\001\002\000\026\012" +
    "\uffc0\013\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\040\uffc0" +
    "\041\uffc0\042\uffc0\045\uffc0\001\002\000\004\016\220\001" +
    "\002\000\006\023\212\024\213\001\002\000\026\012\uffb9" +
    "\013\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\040\uffb9\041" +
    "\uffb9\042\uffb9\045\uffb9\001\002\000\026\012\uffc1\013\uffc1" +
    "\032\uffc1\033\uffc1\034\uffc1\035\uffc1\040\uffc1\041\uffc1\042" +
    "\uffc1\045\uffc1\001\002\000\024\012\uffc3\013\uffc3\032\uffc3" +
    "\033\uffc3\034\uffc3\035\uffc3\040\uffc3\041\uffc3\045\uffc3\001" +
    "\002\000\004\014\204\001\002\000\026\012\uffba\013\uffba" +
    "\032\uffba\033\uffba\034\uffba\035\uffba\040\uffba\041\uffba\042" +
    "\uffba\045\uffba\001\002\000\004\014\176\001\002\000\004" +
    "\014\170\001\002\000\026\012\uffbb\013\uffbb\032\uffbb\033" +
    "\uffbb\034\uffbb\035\uffbb\040\uffbb\041\uffbb\042\uffbb\045\uffbb" +
    "\001\002\000\016\005\124\010\122\014\123\023\uffb4\024" +
    "\uffb4\045\047\001\002\000\026\012\uffbc\013\uffbc\032\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\040\uffbc\041\uffbc\042\uffbc\045" +
    "\uffbc\001\002\000\004\045\047\001\002\000\004\014\162" +
    "\001\002\000\026\012\uffbf\013\uffbf\032\uffbf\033\uffbf\034" +
    "\uffbf\035\uffbf\040\uffbf\041\uffbf\042\uffbf\045\uffbf\001\002" +
    "\000\026\012\uffc2\013\uffc2\032\uffc2\033\uffc2\034\uffc2\035" +
    "\uffc2\040\uffc2\041\uffc2\042\uffc2\045\uffc2\001\002\000\024" +
    "\012\067\013\uffe1\032\104\033\106\034\075\035\114\040" +
    "\072\041\107\045\121\001\002\000\024\012\uffc4\013\uffc4" +
    "\032\uffc4\033\uffc4\034\uffc4\035\uffc4\040\uffc4\041\uffc4\045" +
    "\uffc4\001\002\000\014\005\124\010\122\014\123\023\uffb4" +
    "\024\uffb4\001\002\000\012\014\126\021\135\045\136\046" +
    "\131\001\002\000\014\014\126\015\130\021\135\045\136" +
    "\046\131\001\002\000\004\016\125\001\002\000\026\012" +
    "\uffb6\013\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\040\uffb6" +
    "\041\uffb6\042\uffb6\045\uffb6\001\002\000\012\014\126\021" +
    "\135\045\136\046\131\001\002\000\026\004\uffcf\005\uffcf" +
    "\006\uffcf\007\uffcf\011\uffcf\015\uffcf\016\uffcf\017\uffcf\022" +
    "\uffcf\025\uffcf\001\002\000\026\004\uffcb\005\uffcb\006\uffcb" +
    "\007\uffcb\011\uffcb\015\uffcb\016\uffcb\017\uffcb\022\uffcb\025" +
    "\uffcb\001\002\000\026\004\uffd9\005\uffd9\006\uffd9\007\uffd9" +
    "\011\uffd9\015\uffd9\016\uffd9\017\uffd9\022\uffd9\025\uffd9\001" +
    "\002\000\022\004\141\005\145\006\140\007\144\015\uffca" +
    "\017\154\022\143\025\142\001\002\000\026\004\uffce\005" +
    "\uffce\006\uffce\007\uffce\011\uffce\015\uffce\016\uffce\017\uffce" +
    "\022\uffce\025\uffce\001\002\000\004\015\153\001\002\000" +
    "\012\014\126\021\135\045\136\046\131\001\002\000\032" +
    "\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\122\011\uffd8\014" +
    "\123\015\uffd8\016\uffd8\017\uffd8\022\uffd8\025\uffd8\001\002" +
    "\000\026\004\141\005\uffd3\006\140\007\144\011\uffd3\015" +
    "\uffd3\016\uffd3\017\uffd3\022\143\025\142\001\002\000\012" +
    "\014\126\021\135\045\136\046\131\001\002\000\012\014" +
    "\126\021\135\045\136\046\131\001\002\000\012\014\126" +
    "\021\135\045\136\046\131\001\002\000\012\014\126\021" +
    "\135\045\136\046\131\001\002\000\012\014\126\021\135" +
    "\045\136\046\131\001\002\000\026\004\uffd4\005\uffd4\006" +
    "\uffd4\007\uffd4\011\uffd4\015\uffd4\016\uffd4\017\uffd4\022\uffd4" +
    "\025\uffd4\001\002\000\026\004\uffd0\005\uffd0\006\uffd0\007" +
    "\uffd0\011\uffd0\015\uffd0\016\uffd0\017\uffd0\022\uffd0\025\uffd0" +
    "\001\002\000\026\004\uffd1\005\uffd1\006\uffd1\007\144\011" +
    "\uffd1\015\uffd1\016\uffd1\017\uffd1\022\uffd1\025\uffd1\001\002" +
    "\000\026\004\uffd2\005\uffd2\006\uffd2\007\144\011\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\022\143\025\uffd2\001\002\000\026" +
    "\004\uffd6\005\uffd6\006\uffd6\007\144\011\uffd6\015\uffd6\016" +
    "\uffd6\017\uffd6\022\143\025\142\001\002\000\026\004\141" +
    "\005\uffd5\006\uffd5\007\144\011\uffd5\015\uffd5\016\uffd5\017" +
    "\uffd5\022\143\025\142\001\002\000\026\004\uffcc\005\uffcc" +
    "\006\uffcc\007\uffcc\011\uffcc\015\uffcc\016\uffcc\017\uffcc\022" +
    "\uffcc\025\uffcc\001\002\000\012\014\126\021\135\045\136" +
    "\046\131\001\002\000\004\015\uffc9\001\002\000\020\004" +
    "\141\005\145\006\140\007\144\015\157\022\143\025\142" +
    "\001\002\000\026\004\uffd7\005\uffd7\006\uffd7\007\uffd7\011" +
    "\uffd7\015\uffd7\016\uffd7\017\uffd7\022\uffd7\025\uffd7\001\002" +
    "\000\020\004\141\005\145\006\140\007\144\011\161\022" +
    "\143\025\142\001\002\000\032\004\uffcd\005\uffcd\006\uffcd" +
    "\007\uffcd\011\uffcd\015\uffcd\016\uffcd\017\uffcd\022\uffcd\023" +
    "\uffcd\024\uffcd\025\uffcd\001\002\000\012\014\126\021\135" +
    "\045\136\046\131\001\002\000\020\004\141\005\145\006" +
    "\140\007\144\015\164\022\143\025\142\001\002\000\022" +
    "\012\067\032\104\033\106\034\075\035\114\040\072\041" +
    "\107\045\121\001\002\000\026\012\uffa9\013\uffa9\032\uffa9" +
    "\033\uffa9\034\uffa9\035\uffa9\040\uffa9\041\uffa9\042\uffa9\045" +
    "\uffa9\001\002\000\004\016\167\001\002\000\026\012\uffee" +
    "\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\040\uffee\041" +
    "\uffee\044\uffee\045\uffee\001\002\000\012\014\126\021\135" +
    "\045\136\046\131\001\002\000\020\004\141\005\145\006" +
    "\140\007\144\015\172\022\143\025\142\001\002\000\022" +
    "\012\067\032\104\033\106\034\075\035\114\040\072\041" +
    "\107\045\121\001\002\000\026\012\uffb0\013\uffb0\032\uffb0" +
    "\033\uffb0\034\uffb0\035\uffb0\040\uffb0\041\uffb0\042\174\045" +
    "\uffb0\001\002\000\022\012\067\032\104\033\106\034\075" +
    "\035\114\040\072\041\107\045\121\001\002\000\026\012" +
    "\uffb1\013\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\040\uffb1" +
    "\041\uffb1\042\uffb1\045\uffb1\001\002\000\014\014\126\015" +
    "\ufff8\021\135\045\136\046\131\001\002\000\004\015\202" +
    "\001\002\000\020\004\141\005\145\006\140\007\144\015" +
    "\uffa2\022\143\025\142\001\002\000\004\015\uffa3\001\002" +
    "\000\004\016\203\001\002\000\026\012\uffa6\013\uffa6\032" +
    "\uffa6\033\uffa6\034\uffa6\035\uffa6\040\uffa6\041\uffa6\042\uffa6" +
    "\045\uffa6\001\002\000\006\015\ufff8\047\206\001\002\000" +
    "\004\015\210\001\002\000\004\015\uffa4\001\002\000\004" +
    "\015\uffa5\001\002\000\004\016\211\001\002\000\026\012" +
    "\uffa7\013\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\040\uffa7" +
    "\041\uffa7\042\uffa7\045\uffa7\001\002\000\012\014\126\021" +
    "\135\045\136\046\131\001\002\000\012\014\126\021\135" +
    "\045\136\046\131\001\002\000\020\004\141\005\145\006" +
    "\140\007\144\016\215\022\143\025\142\001\002\000\026" +
    "\012\uffb5\013\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\040" +
    "\uffb5\041\uffb5\042\uffb5\045\uffb5\001\002\000\020\004\141" +
    "\005\145\006\140\007\144\016\217\022\143\025\142\001" +
    "\002\000\026\012\uffb2\013\uffb2\032\uffb2\033\uffb2\034\uffb2" +
    "\035\uffb2\040\uffb2\041\uffb2\042\uffb2\045\uffb2\001\002\000" +
    "\026\012\uffa8\013\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8" +
    "\040\uffa8\041\uffa8\042\uffa8\045\uffa8\001\002\000\012\014" +
    "\126\021\135\045\136\046\131\001\002\000\020\004\141" +
    "\005\145\006\140\007\144\015\223\022\143\025\142\001" +
    "\002\000\004\012\224\001\002\000\004\026\227\001\002" +
    "\000\010\013\ufff8\026\227\036\236\001\002\000\010\013" +
    "\uffad\026\uffad\036\uffad\001\002\000\004\046\230\001\002" +
    "\000\004\020\231\001\002\000\004\012\067\001\002\000" +
    "\004\030\233\001\002\000\004\016\234\001\002\000\010" +
    "\013\uffac\026\uffac\036\uffac\001\002\000\004\013\245\001" +
    "\002\000\004\020\241\001\002\000\010\013\uffae\026\uffae" +
    "\036\uffae\001\002\000\004\013\uffaa\001\002\000\004\012" +
    "\067\001\002\000\004\030\243\001\002\000\004\016\244" +
    "\001\002\000\004\013\uffab\001\002\000\026\012\uffaf\013" +
    "\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\040\uffaf\041\uffaf" +
    "\042\uffaf\045\uffaf\001\002\000\026\012\ufff1\031\ufff1\032" +
    "\ufff1\033\ufff1\034\ufff1\035\ufff1\040\ufff1\041\ufff1\044\ufff1" +
    "\045\ufff1\001\002\000\024\012\067\013\uffe0\032\104\033" +
    "\106\034\075\035\114\040\072\041\107\045\121\001\002" +
    "\000\026\012\uffb8\013\uffb8\032\uffb8\033\uffb8\034\uffb8\035" +
    "\uffb8\040\uffb8\041\uffb8\042\uffb8\045\uffb8\001\002\000\020" +
    "\004\141\005\145\006\140\007\144\016\252\022\143\025" +
    "\142\001\002\000\026\012\uffb7\013\uffb7\032\uffb7\033\uffb7" +
    "\034\uffb7\035\uffb7\040\uffb7\041\uffb7\042\uffb7\045\uffb7\001" +
    "\002\000\024\012\067\031\113\032\104\033\106\034\075" +
    "\035\114\040\072\041\107\045\111\001\002\000\004\013" +
    "\260\001\002\000\024\012\067\031\113\032\104\033\106" +
    "\034\075\035\114\040\072\041\107\045\111\001\002\000" +
    "\024\012\067\013\uffc6\032\104\033\106\034\075\035\114" +
    "\040\072\041\107\045\121\001\002\000\024\012\067\013" +
    "\uffc5\032\104\033\106\034\075\035\114\040\072\041\107" +
    "\045\121\001\002\000\030\012\uffc7\013\uffc7\030\uffc7\032" +
    "\uffc7\033\uffc7\034\uffc7\035\uffc7\040\uffc7\041\uffc7\042\uffc7" +
    "\045\uffc7\001\002\000\006\031\uffe4\044\uffe4\001\002\000" +
    "\006\031\060\045\053\001\002\000\004\015\uffdc\001\002" +
    "\000\006\015\uffda\017\uffda\001\002\000\026\012\uffef\031" +
    "\uffef\032\uffef\033\uffef\034\uffef\035\uffef\040\uffef\041\uffef" +
    "\044\uffef\045\uffef\001\002\000\004\002\ufffc\001\002\000" +
    "\004\014\277\001\002\000\004\014\271\001\002\000\004" +
    "\015\272\001\002\000\004\012\273\001\002\000\026\012" +
    "\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\040\uffe7" +
    "\041\uffe7\043\uffe7\045\uffe7\001\002\000\026\012\ufff8\031" +
    "\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\040\ufff8\041\ufff8" +
    "\043\017\045\ufff8\001\002\000\004\013\276\001\002\000" +
    "\004\002\uffe6\001\002\000\010\015\ufff8\031\060\045\053" +
    "\001\002\000\004\015\301\001\002\000\004\012\302\001" +
    "\002\000\026\012\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3" +
    "\035\uffe3\040\uffe3\041\uffe3\043\uffe3\045\uffe3\001\002\000" +
    "\026\012\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8" +
    "\040\ufff8\041\ufff8\043\017\045\ufff8\001\002\000\004\013" +
    "\305\001\002\000\006\031\uffe2\044\uffe2\001\002\000\004" +
    "\002\uffe9\001\002\000\004\045\310\001\002\000\004\014" +
    "\052\001\002\000\012\031\ufffa\043\ufffa\044\ufffa\045\ufffa" +
    "\001\002\000\004\046\313\001\002\000\004\016\314\001" +
    "\002\000\014\027\ufff7\031\ufff7\043\ufff7\044\ufff7\045\ufff7" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\006\002\003\055\004\001\001\000\002\001" +
    "\001\000\006\003\005\056\006\001\001\000\002\001\001" +
    "\000\012\004\007\006\013\014\012\015\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\013\014\310" +
    "\015\011\001\001\000\010\006\017\016\014\017\015\001" +
    "\001\000\002\001\001\000\014\005\033\007\035\010\034" +
    "\021\037\022\031\001\001\000\010\006\017\016\030\017" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\165\024\043\001\001\000\002\001\001" +
    "\000\010\005\033\007\305\010\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\033\007\265\010\034" +
    "\022\245\001\001\000\006\023\041\024\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\023\045\024\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\056" +
    "\011\054\012\055\013\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\060\063\001\001\000\012\006\017\016\065" +
    "\017\015\053\064\001\001\000\002\001\001\000\044\021" +
    "\072\022\031\026\073\027\076\030\100\031\116\032\102" +
    "\033\101\034\075\035\077\036\114\037\070\040\067\044" +
    "\111\045\107\047\104\052\115\001\001\000\004\062\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\025" +
    "\250\026\126\027\132\001\001\000\042\022\245\026\073" +
    "\027\076\030\100\031\246\032\102\033\101\034\075\035" +
    "\077\036\114\037\070\040\067\044\111\045\107\047\104" +
    "\052\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\165\024\043\001\001\000" +
    "\002\001\001\000\006\023\041\024\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\026" +
    "\073\027\076\030\100\032\117\033\101\034\075\035\077" +
    "\036\114\037\070\040\067\044\111\045\107\047\104\052" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\025\157\026\126\027\132\001\001\000\012\025\131\026" +
    "\126\027\132\046\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\025\155\026\126\027\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\025" +
    "\136\026\126\027\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\025\151\026\126\027\132\001\001\000" +
    "\010\025\150\026\126\027\132\001\001\000\010\025\147" +
    "\026\126\027\132\001\001\000\010\025\146\026\126\027" +
    "\132\001\001\000\010\025\145\026\126\027\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\025\131\026\126\027\132\046\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\025\162\026" +
    "\126\027\132\001\001\000\002\001\001\000\036\026\073" +
    "\027\076\030\100\032\164\033\101\034\075\035\077\036" +
    "\114\037\070\040\067\044\111\045\107\047\104\052\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\025\170\026\126\027\132\001\001\000\002" +
    "\001\001\000\036\026\073\027\076\030\100\032\172\033" +
    "\101\034\075\035\077\036\114\037\070\040\067\044\111" +
    "\045\107\047\104\052\115\001\001\000\002\001\001\000" +
    "\036\026\073\027\076\030\100\032\174\033\101\034\075" +
    "\035\077\036\114\037\070\040\067\044\111\045\107\047" +
    "\104\052\115\001\001\000\002\001\001\000\014\006\200" +
    "\025\177\026\126\027\132\051\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\206\050\204\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\025\215\026\126\027" +
    "\132\001\001\000\010\025\213\026\126\027\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\025\221\026\126" +
    "\027\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\041\224\042\225\001\001\000\010\006\237\042\236" +
    "\043\234\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\231\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\241\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\026\073\027\076\030\100\032\117\033\101\034\075\035" +
    "\077\036\114\037\070\040\067\044\111\045\107\047\104" +
    "\052\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\021\254\022\031\026\073\027\076" +
    "\030\100\031\255\032\102\033\101\034\075\035\077\036" +
    "\114\037\070\040\067\044\111\045\107\047\104\052\115" +
    "\054\253\001\001\000\002\001\001\000\042\022\245\026" +
    "\073\027\076\030\100\031\256\032\102\033\101\034\075" +
    "\035\077\036\114\037\070\040\067\044\111\045\107\047" +
    "\104\052\115\001\001\000\036\026\073\027\076\030\100" +
    "\032\117\033\101\034\075\035\077\036\114\037\070\040" +
    "\067\044\111\045\107\047\104\052\115\001\001\000\036" +
    "\026\073\027\076\030\100\032\117\033\101\034\075\035" +
    "\077\036\114\037\070\040\067\044\111\045\107\047\104" +
    "\052\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\262\013\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\057\273\001\001\000\012\006\017\016\065\017" +
    "\015\053\274\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\056\011\277\012\055\013\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\302\001\001" +
    "\000\012\006\017\016\065\017\015\053\303\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // opcionesEscribeEnt ::= expresion 
            {
              OpcionesEscribeEnt RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesEscribeEnt",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // opcionesEscribeEnt ::= epsilon 
            {
              OpcionesEscribeEnt RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesEscribeEnt",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // opcionesEscribe ::= STRING 
            {
              OpcionesEscribe RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesEscribe",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // opcionesEscribe ::= epsilon 
            {
              OpcionesEscribe RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesEscribe",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentenciaSalida ::= ESCRIBE_ENT OPEN_KEY opcionesEscribeEnt CLOSE_KEY SEMI_COLON 
            {
              SentenciaSalida RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSalida",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentenciaSalida ::= ESCRIBE OPEN_KEY opcionesEscribe CLOSE_KEY SEMI_COLON 
            {
              SentenciaSalida RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSalida",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sentenciaLlamadaFuncion ::= llamadaFuncion SEMI_COLON 
            {
              SentenciaLlamadaFuncion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaLlamadaFuncion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentenciaMientras ::= MIENTRAS OPEN_KEY expresion CLOSE_KEY sentencia 
            {
              SentenciaMientras RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaMientras",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // porDefecto ::= epsilon 
            {
              PorDefecto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("porDefecto",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // porDefecto ::= PORDEFECTO TWO_POINTS bloque CORTE SEMI_COLON 
            {
              PorDefecto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("porDefecto",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // casoAlt ::= CASO NUMERO TWO_POINTS bloque CORTE SEMI_COLON 
            {
              CasoAlt RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casoAlt",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // casosAlternativa ::= casoAlt 
            {
              CasosAlternativa RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casosAlternativa",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // casosAlternativa ::= casosAlternativa casoAlt 
            {
              CasosAlternativa RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casosAlternativa",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentenciaAlternativas ::= ALTENATIVAS OPEN_KEY expresion CLOSE_KEY OPEN_PARENTHESIS casosAlternativa porDefecto CLOSE_PARENTHESIS 
            {
              SentenciaAlternativas RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAlternativas",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentenciaSi ::= SI OPEN_KEY expresion CLOSE_KEY sentencia 
            {
              SentenciaSi RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSi",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentenciaSi ::= SI OPEN_KEY expresion CLOSE_KEY sentencia SINO sentencia 
            {
              SentenciaSi RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSi",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentenciaAsignacionSuma ::= ref ASSIGN_SUMA expresion SEMI_COLON 
            {
              SentenciaAsignacionSuma RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacionSuma",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ref ::= accesoVector 
            {
              Ref RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ref ::= IDENTIFICADOR 
            {
              Ref RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentenciaAsignacion ::= ref ASSIGN expresion SEMI_COLON 
            {
              SentenciaAsignacion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentenciaIncremento ::= IDENTIFICADOR AUTO_INCREMENTO SEMI_COLON 
            {
              SentenciaIncremento RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIncremento",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentenciaDevuelve ::= DEVUELVE expresion SEMI_COLON 
            {
              SentenciaDevuelve RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaDevuelve",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentenciaDevuelve ::= DEVUELVE SEMI_COLON 
            {
              SentenciaDevuelve RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaDevuelve",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentencia ::= bloque 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentencia ::= sentenciaSalida 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentencia ::= sentenciaLlamadaFuncion 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentencia ::= sentenciaMientras 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentencia ::= sentenciaAlternativas 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentencia ::= sentenciaSi 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentencia ::= sentenciaAsignacionSuma 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentencia ::= sentenciaAsignacion 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentencia ::= sentenciaIncremento 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentencia ::= sentenciaDevuelve 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // listadoSentencias ::= sentencia 
            {
              ListadoSentencias RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoSentencias",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // listadoSentencias ::= listadoSentencias sentencia 
            {
              ListadoSentencias RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoSentencias",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cuerpoBloque ::= seccionVariables listadoSentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoBloque",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cuerpoBloque ::= listadoSentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoBloque",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // bloque ::= OPEN_PARENTHESIS NT$5 cuerpoBloque CLOSE_PARENTHESIS 
            {
              Bloque RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Bloque) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
					
				//cerramos ambito 
				ScopeIF scope = scopeManager.getCurrentScope();
				System.out.println("Cerrando ambito: " + scope.getName() + ", Nivel: "+ scope.getLevel());
				scopeManager.closeScope();				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$5 ::= 
            {
              Bloque RESULT =null;

				// Crea ambito de la funcion 
				String idLexema  = "bloque";								
				ScopeIF scope = scopeManager.openScope(idLexema);
					
				System.out.println("Abriendo ambito: " + scope.getName() + ", Nivel: "+ scope.getLevel());
						
				// Obtenemos la tabla de tipos y la de simbolos 
				SymbolTableIF symbolTable = scope.getSymbolTable();
				TypeTableIF typeTable = scope.getTypeTable();								
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parametros ::= expresion COLON parametros 
            {
              Parametros RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parametros ::= expresion 
            {
              Parametros RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // llamadaFuncion ::= IDENTIFICADOR OPEN_KEY CLOSE_KEY 
            {
              LlamadaFuncion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // llamadaFuncion ::= IDENTIFICADOR OPEN_KEY parametros CLOSE_KEY 
            {
              LlamadaFuncion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // accesoVector ::= IDENTIFICADOR OPEN_BRACKET expresion CLOSE_BRACKET 
            {
              AccesoVector RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoVector",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= llamadaFuncion 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= accesoVector 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= expresion AND_LOGICA expresion 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= expresion EQUAL expresion 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= expresion LOWER_THAN expresion 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= NEGACION expresion 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= expresion AUTO_INCREMENTO 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= expresion MULT expresion 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= expresion PLUS expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			 	Expresion e = new Expresion(e1, e2);
			 	// comprobacion de tipos de e1 y e2
			 	// generacion de codigo de e1 + e2
			 	// ...
			 	RESULT = e;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= OPEN_KEY expresion CLOSE_KEY 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
				    	
		        Expresion e = new Expresion();  // generamos un objeto nuevo del tipo de la parte izq de la regla (en este caso, el antecedente es expresion y su clase Expresion)
		        RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= NUMERO 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametro ::= IDENTIFICADOR IDENTIFICADOR 
            {
              Parametro RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametro ::= ENTERO IDENTIFICADOR 
            {
              Parametro RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracionParametros ::= parametro COLON declaracionParametros 
            {
              DeclaracionParametros RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionParametros",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracionParametros ::= parametro 
            {
              DeclaracionParametros RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionParametros",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // seccionParametros ::= epsilon 
            {
              SeccionParametros RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionParametros",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // seccionParametros ::= declaracionParametros 
            {
              SeccionParametros RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionParametros",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cuerpoFuncion ::= seccionTipos seccionVariables listadoSentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFuncion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cuerpoFuncion ::= seccionTipos listadoSentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFuncion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funcion ::= VACIO IDENTIFICADOR OPEN_KEY seccionParametros CLOSE_KEY OPEN_PARENTHESIS NT$4 cuerpoFuncion CLOSE_PARENTHESIS 
            {
              Funcion RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Funcion) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
					
				//cerramos ambito 
				ScopeIF scope = scopeManager.getCurrentScope();
				System.out.println("Cerrando ambito: " + scope.getName() + ", Nivel: "+ scope.getLevel());
				scopeManager.closeScope();				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$4 ::= 
            {
              Funcion RESULT =null;

				// Crea ambito de la funcion 
				String idLexema  = "funcion";								
				ScopeIF scope = scopeManager.openScope(idLexema);
					
				System.out.println("Abriendo ambito: " + scope.getName() + ", Nivel: "+ scope.getLevel());
						
				// Obtenemos la tabla de tipos y la de simbolos 
				SymbolTableIF symbolTable = scope.getSymbolTable();
				TypeTableIF typeTable = scope.getTypeTable();								
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funcion ::= ENTERO IDENTIFICADOR OPEN_KEY seccionParametros CLOSE_KEY OPEN_PARENTHESIS NT$3 cuerpoFuncion CLOSE_PARENTHESIS 
            {
              Funcion RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Funcion) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
					
				//cerramos ambito 
				ScopeIF scope = scopeManager.getCurrentScope();
				System.out.println("Cerrando ambito: " + scope.getName() + ", Nivel: "+ scope.getLevel());
				scopeManager.closeScope();				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$3 ::= 
            {
              Funcion RESULT =null;

				// Crea ambito de la funcion 
				String idLexema  = "funcion";								
				ScopeIF scope = scopeManager.openScope(idLexema);
					
				System.out.println("Abriendo ambito: " + scope.getName() + ", Nivel: "+ scope.getLevel());
						
				// Obtenemos la tabla de tipos y la de simbolos 
				SymbolTableIF symbolTable = scope.getSymbolTable();
				TypeTableIF typeTable = scope.getTypeTable();								
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // funcionPrincipal ::= VACIO principal OPEN_KEY CLOSE_KEY OPEN_PARENTHESIS NT$2 cuerpoFuncion CLOSE_PARENTHESIS 
            {
              FuncionPrincipal RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (FuncionPrincipal) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
					
						//cerramos ambito 
						ScopeIF scope = scopeManager.getCurrentScope();
						System.out.println("Cerrando ambito: " + scope.getName() + ", Nivel: "+ scope.getLevel());
						scopeManager.closeScope();				
					 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionPrincipal",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$2 ::= 
            {
              FuncionPrincipal RESULT =null;

						// Crea ambito de la funcion principal
						String idLexema  = "principal";								
						ScopeIF scope = scopeManager.openScope(idLexema);
						
						System.out.println("Abriendo ambito: " + scope.getName() + ", Nivel: "+ scope.getLevel());
						
						// Obtenemos la tabla de tipos y la de simbolos 
						SymbolTableIF symbolTable = scope.getSymbolTable();
						TypeTableIF typeTable = scope.getTypeTable();								
				  	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // seccionFunciones ::= funcionPrincipal 
            {
              SeccionFunciones RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionFunciones",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // seccionFunciones ::= funcion seccionFunciones 
            {
              SeccionFunciones RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionFunciones",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // id ::= IDENTIFICADOR ASSIGN NUMERO 
            {
              Id RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // id ::= IDENTIFICADOR 
            {
              Id RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // listadoIDs ::= id 
            {
              ListadoIDs RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIDs",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // listadoIDs ::= id COLON listadoIDs 
            {
              ListadoIDs RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIDs",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracionVariable ::= IDENTIFICADOR listadoIDs SEMI_COLON 
            {
              DeclaracionVariable RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracionVariable ::= ENTERO listadoIDs SEMI_COLON 
            {
              DeclaracionVariable RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // seccionVariables ::= declaracionVariable 
            {
              SeccionVariables RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionVariables",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // seccionVariables ::= seccionVariables declaracionVariable 
            {
              SeccionVariables RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionVariables",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tamTipo ::= IDENTIFICADOR 
            {
              TamTipo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tamTipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tamTipo ::= NUMERO 
            {
              TamTipo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tamTipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracionTipo ::= TIPO ENTERO IDENTIFICADOR OPEN_BRACKET tamTipo CLOSE_BRACKET SEMI_COLON 
            {
              DeclaracionTipo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // seccionTipos ::= epsilon 
            {
              SeccionTipos RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionTipos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // seccionTipos ::= declaracionTipo seccionTipos 
            {
              SeccionTipos RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionTipos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracionConstante ::= CONSTANTE IDENTIFICADOR NUMERO SEMI_COLON 
            {
              DeclaracionConstante RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token value = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							
							// Obtenemos el ambito donde nos encontramos y obtenemos la tabla de simbolos 
							ScopeIF scope = scopeManager.getCurrentScope();
							SymbolTableIF tablaSimbolos = scope.getSymbolTable();
							String name = id.getLexema();
							
							// Comprobamos que la constante no este ya declarada en la tabla de simbolos
							if(tablaSimbolos.containsSymbol(name)){
								semanticErrorManager.semanticFatalError("Constante " + name + " ya declarada");								
							}else{
								System.out.println("Constante " + name + " aun NO declarada");
														
								// Introducimos en la tabla de simbolos la constante con su ambito, nombre, tipo y valor
								TypeTableIF tablaTipos = scope.getTypeTable();
								TypeIF tipo = scopeManager.searchType("ENTERO");  // en la pec de referencia las constantes eran todas enteras
								SymbolConstant symbolConstant = new SymbolConstant(scope, name, tipo);
								symbolConstant.setValue(value.getLexema()); // para esto se ha modificado la clase SymbolConstant en semantic.symbol
								tablaSimbolos.addSymbol(symbolConstant);								
							}
					   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstante",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // epsilon ::= 
            {
              Epsilon RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("epsilon",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // seccionConstantes ::= epsilon 
            {
              SeccionConstantes RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionConstantes",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // seccionConstantes ::= declaracionConstante seccionConstantes 
            {
              SeccionConstantes RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionConstantes",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // axiom ::= seccionConstantes seccionTipos seccionFunciones 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // axiom ::= seccionConstantes seccionTipos seccionVariables seccionFunciones 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // initAxiom ::= NT$1 axiom 
            {
              Axiom RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Axiom) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
					
				//cerramos ambito global
				ScopeIF scope = scopeManager.getCurrentScope();
				System.out.println("Cerrando ambito: " + scope.getName() + ", Nivel: "+ scope.getLevel());
				scopeManager.closeScope();				
		      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initAxiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Axiom RESULT =null;

				// Creamos ambito global 
				String idLexema  = "global";								
				ScopeIF scope = scopeManager.openScope(idLexema);
				
				System.out.println("Abriendo ambito: " + scope.getName() + ", Nivel: "+ scope.getLevel());
								
				// Obtenemos la tabla de tipos y la de simbolos 
				SymbolTableIF symbolTable = scope.getSymbolTable();
				TypeTableIF typeTable = scope.getTypeTable();
				
		  	  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 initAxiom 
            {
              Program RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Program) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   		
  		// No modificar esta estructura, aunque se pueden añadir más acciones semánticas
  		
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);

  		// En caso de no comentarse las dos sentencias anteriores se puede generar una excepcion
  		// en las llamadas a cupTest si el compilador no está completo. Esto es debido a que 
  		// aún no se tendrá implementada la generación de código intermedio ni final.
  		// Para la entrega final deberán descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
  		
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Program RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

