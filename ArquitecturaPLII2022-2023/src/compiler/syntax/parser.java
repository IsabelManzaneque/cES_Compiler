
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 21 18:44:57 GMT 2023
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 21 18:44:57 GMT 2023
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\055\002\000\002\002" +
    "\004\000\002\056\002\000\002\003\004\000\002\004\006" +
    "\000\002\004\005\000\002\015\004\000\002\015\003\000" +
    "\002\006\002\000\002\016\006\000\002\017\004\000\002" +
    "\017\003\000\002\020\011\000\002\021\003\000\002\021" +
    "\003\000\002\023\004\000\002\023\003\000\002\024\005" +
    "\000\002\024\005\000\002\025\005\000\002\025\003\000" +
    "\002\026\003\000\002\026\005\000\002\007\004\000\002" +
    "\007\003\000\002\057\002\000\002\005\012\000\002\010" +
    "\012\000\002\011\004\000\002\011\005\000\002\012\003" +
    "\000\002\012\003\000\002\013\003\000\002\013\005\000" +
    "\002\014\004\000\002\014\004\000\002\027\003\000\002" +
    "\027\003\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\004\000\002\027\004\000\002\027\005" +
    "\000\002\027\005\000\002\027\005\000\002\027\003\000" +
    "\002\027\003\000\002\030\006\000\002\031\006\000\002" +
    "\031\005\000\002\050\003\000\002\050\005\000\002\060" +
    "\002\000\002\032\005\000\002\033\004\000\002\033\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\054\004\000\002\054\005\000\002\035\005" +
    "\000\002\036\006\000\002\037\003\000\002\037\003\000" +
    "\002\040\006\000\002\041\011\000\002\041\007\000\002" +
    "\042\012\000\002\043\004\000\002\043\003\000\002\044" +
    "\010\000\002\045\007\000\002\045\003\000\002\046\007" +
    "\000\002\047\004\000\002\051\007\000\002\051\007\000" +
    "\002\052\003\000\002\052\003\000\002\053\003\000\002" +
    "\053\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\014\027\000\031\000\043\000\044\000\045" +
    "\000\001\002\000\004\002\301\001\002\000\014\027\ufffe" +
    "\031\ufffe\043\ufffe\044\ufffe\045\ufffe\001\002\000\004\002" +
    "\uffff\001\002\000\014\027\011\031\ufff8\043\ufff8\044\ufff8" +
    "\045\ufff8\001\002\000\004\002\ufffd\001\002\000\004\045" +
    "\276\001\002\000\014\027\011\031\ufff8\043\ufff8\044\ufff8" +
    "\045\ufff8\001\002\000\012\031\ufff8\043\017\044\ufff8\045" +
    "\ufff8\001\002\000\012\031\ufff9\043\ufff9\044\ufff9\045\ufff9" +
    "\001\002\000\010\031\041\044\uffe7\045\034\001\002\000" +
    "\030\012\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8" +
    "\040\ufff8\041\ufff8\043\017\044\ufff8\045\ufff8\001\002\000" +
    "\004\031\021\001\002\000\026\012\ufff5\031\ufff5\032\ufff5" +
    "\033\ufff5\034\ufff5\035\ufff5\040\ufff5\041\ufff5\044\ufff5\045" +
    "\ufff5\001\002\000\004\045\022\001\002\000\004\010\023" +
    "\001\002\000\006\045\025\046\024\001\002\000\004\011" +
    "\ufff3\001\002\000\004\011\ufff2\001\002\000\004\011\027" +
    "\001\002\000\004\016\030\001\002\000\030\012\ufff4\031" +
    "\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\040\ufff4\041\ufff4" +
    "\043\ufff4\044\ufff4\045\ufff4\001\002\000\026\012\ufff6\031" +
    "\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\040\ufff6\041\ufff6" +
    "\044\ufff6\045\ufff6\001\002\000\026\012\ufff0\031\ufff0\032" +
    "\ufff0\033\ufff0\034\ufff0\035\ufff0\040\ufff0\041\ufff0\044\ufff0" +
    "\045\ufff0\001\002\000\004\044\266\001\002\000\004\045" +
    "\047\001\002\000\004\002\uffe8\001\002\000\006\031\264" +
    "\044\uffe7\001\002\000\004\002\ufffb\001\002\000\010\031" +
    "\041\044\uffe7\045\034\001\002\000\004\045\043\001\002" +
    "\000\004\016\261\001\002\000\012\014\052\016\uffeb\017" +
    "\uffeb\024\050\001\002\000\006\016\uffec\017\045\001\002" +
    "\000\004\045\047\001\002\000\004\016\uffed\001\002\000" +
    "\010\016\uffeb\017\uffeb\024\050\001\002\000\004\046\051" +
    "\001\002\000\006\016\uffea\017\uffea\001\002\000\010\015" +
    "\ufff8\031\060\045\053\001\002\000\004\045\260\001\002" +
    "\000\006\015\uffe0\017\256\001\002\000\004\015\062\001" +
    "\002\000\004\015\uffe2\001\002\000\004\015\uffe1\001\002" +
    "\000\004\045\061\001\002\000\006\015\uffde\017\uffde\001" +
    "\002\000\004\012\063\001\002\000\026\012\ufff8\031\ufff8" +
    "\032\ufff8\033\ufff8\034\ufff8\035\ufff8\040\ufff8\041\ufff8\043" +
    "\017\045\ufff8\001\002\000\024\012\uffcb\031\112\032\103" +
    "\033\105\034\073\035\113\040\067\041\106\045\110\001" +
    "\002\000\026\012\uffc2\013\uffc2\032\uffc2\033\uffc2\034\uffc2" +
    "\035\uffc2\040\uffc2\041\uffc2\042\uffc2\045\uffc2\001\002\000" +
    "\026\012\uffc3\013\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3" +
    "\040\uffc3\041\uffc3\042\uffc3\045\uffc3\001\002\000\014\014" +
    "\126\016\253\021\135\045\136\046\131\001\002\000\006" +
    "\031\uffe5\044\uffe5\001\002\000\024\012\uffcb\031\112\032" +
    "\103\033\105\034\073\035\113\040\067\041\106\045\110" +
    "\001\002\000\006\023\uffb8\024\uffb8\001\002\000\004\014" +
    "\223\001\002\000\026\012\uffc5\013\uffc5\032\uffc5\033\uffc5" +
    "\034\uffc5\035\uffc5\040\uffc5\041\uffc5\042\uffc5\045\uffc5\001" +
    "\002\000\004\016\222\001\002\000\004\012\220\001\002" +
    "\000\006\023\212\024\213\001\002\000\026\012\uffbe\013" +
    "\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\040\uffbe\041\uffbe" +
    "\042\uffbe\045\uffbe\001\002\000\026\012\uffc6\013\uffc6\032" +
    "\uffc6\033\uffc6\034\uffc6\035\uffc6\040\uffc6\041\uffc6\042\uffc6" +
    "\045\uffc6\001\002\000\024\012\uffc8\013\uffc8\032\uffc8\033" +
    "\uffc8\034\uffc8\035\uffc8\040\uffc8\041\uffc8\045\uffc8\001\002" +
    "\000\004\014\204\001\002\000\026\012\uffbf\013\uffbf\032" +
    "\uffbf\033\uffbf\034\uffbf\035\uffbf\040\uffbf\041\uffbf\042\uffbf" +
    "\045\uffbf\001\002\000\004\014\176\001\002\000\004\014" +
    "\170\001\002\000\026\012\uffc0\013\uffc0\032\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\040\uffc0\041\uffc0\042\uffc0\045\uffc0\001" +
    "\002\000\016\005\124\010\122\014\123\023\uffb9\024\uffb9" +
    "\045\047\001\002\000\026\012\uffc1\013\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\040\uffc1\041\uffc1\042\uffc1\045\uffc1" +
    "\001\002\000\004\045\047\001\002\000\004\014\162\001" +
    "\002\000\026\012\uffc4\013\uffc4\032\uffc4\033\uffc4\034\uffc4" +
    "\035\uffc4\040\uffc4\041\uffc4\042\uffc4\045\uffc4\001\002\000" +
    "\026\012\uffc7\013\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7" +
    "\040\uffc7\041\uffc7\042\uffc7\045\uffc7\001\002\000\024\012" +
    "\uffcb\013\121\032\103\033\105\034\073\035\113\040\067" +
    "\041\106\045\120\001\002\000\024\012\uffc9\013\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\040\uffc9\041\uffc9\045\uffc9" +
    "\001\002\000\014\005\124\010\122\014\123\023\uffb9\024" +
    "\uffb9\001\002\000\036\002\uffe4\012\uffe4\013\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\040\uffe4\041" +
    "\uffe4\042\uffe4\044\uffe4\045\uffe4\001\002\000\012\014\126" +
    "\021\135\045\136\046\131\001\002\000\014\014\126\015" +
    "\130\021\135\045\136\046\131\001\002\000\004\016\125" +
    "\001\002\000\026\012\uffbb\013\uffbb\032\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\040\uffbb\041\uffbb\042\uffbb\045\uffbb\001\002" +
    "\000\012\014\126\021\135\045\136\046\131\001\002\000" +
    "\026\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011\uffd2\015\uffd2" +
    "\016\uffd2\017\uffd2\022\uffd2\025\uffd2\001\002\000\026\004" +
    "\uffce\005\uffce\006\uffce\007\uffce\011\uffce\015\uffce\016\uffce" +
    "\017\uffce\022\uffce\025\uffce\001\002\000\026\004\uffdc\005" +
    "\uffdc\006\uffdc\007\uffdc\011\uffdc\015\uffdc\016\uffdc\017\uffdc" +
    "\022\uffdc\025\uffdc\001\002\000\022\004\141\005\145\006" +
    "\140\007\144\015\uffcd\017\154\022\143\025\142\001\002" +
    "\000\026\004\uffd1\005\uffd1\006\uffd1\007\uffd1\011\uffd1\015" +
    "\uffd1\016\uffd1\017\uffd1\022\uffd1\025\uffd1\001\002\000\004" +
    "\015\153\001\002\000\012\014\126\021\135\045\136\046" +
    "\131\001\002\000\032\004\uffdb\005\uffdb\006\uffdb\007\uffdb" +
    "\010\122\011\uffdb\014\123\015\uffdb\016\uffdb\017\uffdb\022" +
    "\uffdb\025\uffdb\001\002\000\026\004\141\005\uffd6\006\140" +
    "\007\144\011\uffd6\015\uffd6\016\uffd6\017\uffd6\022\143\025" +
    "\142\001\002\000\012\014\126\021\135\045\136\046\131" +
    "\001\002\000\012\014\126\021\135\045\136\046\131\001" +
    "\002\000\012\014\126\021\135\045\136\046\131\001\002" +
    "\000\012\014\126\021\135\045\136\046\131\001\002\000" +
    "\012\014\126\021\135\045\136\046\131\001\002\000\026" +
    "\004\uffd7\005\uffd7\006\uffd7\007\uffd7\011\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\022\uffd7\025\uffd7\001\002\000\026\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\011\uffd3\015\uffd3\016\uffd3\017" +
    "\uffd3\022\uffd3\025\uffd3\001\002\000\026\004\uffd4\005\uffd4" +
    "\006\uffd4\007\144\011\uffd4\015\uffd4\016\uffd4\017\uffd4\022" +
    "\uffd4\025\uffd4\001\002\000\026\004\uffd5\005\uffd5\006\uffd5" +
    "\007\144\011\uffd5\015\uffd5\016\uffd5\017\uffd5\022\143\025" +
    "\uffd5\001\002\000\026\004\uffd9\005\uffd9\006\uffd9\007\144" +
    "\011\uffd9\015\uffd9\016\uffd9\017\uffd9\022\143\025\142\001" +
    "\002\000\026\004\141\005\uffd8\006\uffd8\007\144\011\uffd8" +
    "\015\uffd8\016\uffd8\017\uffd8\022\143\025\142\001\002\000" +
    "\026\004\uffcf\005\uffcf\006\uffcf\007\uffcf\011\uffcf\015\uffcf" +
    "\016\uffcf\017\uffcf\022\uffcf\025\uffcf\001\002\000\012\014" +
    "\126\021\135\045\136\046\131\001\002\000\004\015\uffcc" +
    "\001\002\000\020\004\141\005\145\006\140\007\144\015" +
    "\157\022\143\025\142\001\002\000\026\004\uffda\005\uffda" +
    "\006\uffda\007\uffda\011\uffda\015\uffda\016\uffda\017\uffda\022" +
    "\uffda\025\uffda\001\002\000\020\004\141\005\145\006\140" +
    "\007\144\011\161\022\143\025\142\001\002\000\032\004" +
    "\uffd0\005\uffd0\006\uffd0\007\uffd0\011\uffd0\015\uffd0\016\uffd0" +
    "\017\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\001\002\000" +
    "\012\014\126\021\135\045\136\046\131\001\002\000\020" +
    "\004\141\005\145\006\140\007\144\015\164\022\143\025" +
    "\142\001\002\000\022\012\uffcb\032\103\033\105\034\073" +
    "\035\113\040\067\041\106\045\120\001\002\000\026\012" +
    "\uffae\013\uffae\032\uffae\033\uffae\034\uffae\035\uffae\040\uffae" +
    "\041\uffae\042\uffae\045\uffae\001\002\000\004\016\167\001" +
    "\002\000\026\012\uffee\031\uffee\032\uffee\033\uffee\034\uffee" +
    "\035\uffee\040\uffee\041\uffee\044\uffee\045\uffee\001\002\000" +
    "\012\014\126\021\135\045\136\046\131\001\002\000\020" +
    "\004\141\005\145\006\140\007\144\015\172\022\143\025" +
    "\142\001\002\000\022\012\uffcb\032\103\033\105\034\073" +
    "\035\113\040\067\041\106\045\120\001\002\000\026\012" +
    "\uffb5\013\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\040\uffb5" +
    "\041\uffb5\042\174\045\uffb5\001\002\000\022\012\uffcb\032" +
    "\103\033\105\034\073\035\113\040\067\041\106\045\120" +
    "\001\002\000\026\012\uffb6\013\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\035\uffb6\040\uffb6\041\uffb6\042\uffb6\045\uffb6\001\002" +
    "\000\014\014\126\015\ufff8\021\135\045\136\046\131\001" +
    "\002\000\004\015\202\001\002\000\020\004\141\005\145" +
    "\006\140\007\144\015\uffa7\022\143\025\142\001\002\000" +
    "\004\015\uffa8\001\002\000\004\016\203\001\002\000\026" +
    "\012\uffab\013\uffab\032\uffab\033\uffab\034\uffab\035\uffab\040" +
    "\uffab\041\uffab\042\uffab\045\uffab\001\002\000\006\015\ufff8" +
    "\047\206\001\002\000\004\015\210\001\002\000\004\015" +
    "\uffa9\001\002\000\004\015\uffaa\001\002\000\004\016\211" +
    "\001\002\000\026\012\uffac\013\uffac\032\uffac\033\uffac\034" +
    "\uffac\035\uffac\040\uffac\041\uffac\042\uffac\045\uffac\001\002" +
    "\000\012\014\126\021\135\045\136\046\131\001\002\000" +
    "\012\014\126\021\135\045\136\046\131\001\002\000\020" +
    "\004\141\005\145\006\140\007\144\016\215\022\143\025" +
    "\142\001\002\000\026\012\uffba\013\uffba\032\uffba\033\uffba" +
    "\034\uffba\035\uffba\040\uffba\041\uffba\042\uffba\045\uffba\001" +
    "\002\000\020\004\141\005\145\006\140\007\144\016\217" +
    "\022\143\025\142\001\002\000\026\012\uffb7\013\uffb7\032" +
    "\uffb7\033\uffb7\034\uffb7\035\uffb7\040\uffb7\041\uffb7\042\uffb7" +
    "\045\uffb7\001\002\000\024\012\uffcb\031\112\032\103\033" +
    "\105\034\073\035\113\040\067\041\106\045\110\001\002" +
    "\000\030\012\uffca\013\uffca\030\uffca\032\uffca\033\uffca\034" +
    "\uffca\035\uffca\040\uffca\041\uffca\042\uffca\045\uffca\001\002" +
    "\000\026\012\uffad\013\uffad\032\uffad\033\uffad\034\uffad\035" +
    "\uffad\040\uffad\041\uffad\042\uffad\045\uffad\001\002\000\012" +
    "\014\126\021\135\045\136\046\131\001\002\000\020\004" +
    "\141\005\145\006\140\007\144\015\225\022\143\025\142" +
    "\001\002\000\004\012\226\001\002\000\004\026\231\001" +
    "\002\000\010\013\ufff8\026\231\036\240\001\002\000\010" +
    "\013\uffb2\026\uffb2\036\uffb2\001\002\000\004\046\232\001" +
    "\002\000\004\020\233\001\002\000\004\012\uffcb\001\002" +
    "\000\004\030\235\001\002\000\004\016\236\001\002\000" +
    "\010\013\uffb1\026\uffb1\036\uffb1\001\002\000\004\013\247" +
    "\001\002\000\004\020\243\001\002\000\010\013\uffb3\026" +
    "\uffb3\036\uffb3\001\002\000\004\013\uffaf\001\002\000\004" +
    "\012\uffcb\001\002\000\004\030\245\001\002\000\004\016" +
    "\246\001\002\000\004\013\uffb0\001\002\000\026\012\uffb4" +
    "\013\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\040\uffb4\041" +
    "\uffb4\042\uffb4\045\uffb4\001\002\000\026\012\ufff1\031\ufff1" +
    "\032\ufff1\033\ufff1\034\ufff1\035\ufff1\040\ufff1\041\ufff1\044" +
    "\ufff1\045\ufff1\001\002\000\024\012\uffcb\013\252\032\103" +
    "\033\105\034\073\035\113\040\067\041\106\045\120\001" +
    "\002\000\036\002\uffe3\012\uffe3\013\uffe3\030\uffe3\031\uffe3" +
    "\032\uffe3\033\uffe3\034\uffe3\035\uffe3\040\uffe3\041\uffe3\042" +
    "\uffe3\044\uffe3\045\uffe3\001\002\000\026\012\uffbd\013\uffbd" +
    "\032\uffbd\033\uffbd\034\uffbd\035\uffbd\040\uffbd\041\uffbd\042" +
    "\uffbd\045\uffbd\001\002\000\020\004\141\005\145\006\140" +
    "\007\144\016\255\022\143\025\142\001\002\000\026\012" +
    "\uffbc\013\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\040\uffbc" +
    "\041\uffbc\042\uffbc\045\uffbc\001\002\000\006\031\060\045" +
    "\053\001\002\000\004\015\uffdf\001\002\000\006\015\uffdd" +
    "\017\uffdd\001\002\000\026\012\uffef\031\uffef\032\uffef\033" +
    "\uffef\034\uffef\035\uffef\040\uffef\041\uffef\044\uffef\045\uffef" +
    "\001\002\000\004\002\ufffc\001\002\000\004\002\uffe9\001" +
    "\002\000\004\045\265\001\002\000\004\014\052\001\002" +
    "\000\004\037\267\001\002\000\004\014\270\001\002\000" +
    "\004\015\271\001\002\000\004\012\272\001\002\000\026" +
    "\012\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\040" +
    "\ufff8\041\ufff8\043\017\045\ufff8\001\002\000\024\012\uffcb" +
    "\031\112\032\103\033\105\034\073\035\113\040\067\041" +
    "\106\045\110\001\002\000\004\002\uffe6\001\002\000\012" +
    "\031\ufffa\043\ufffa\044\ufffa\045\ufffa\001\002\000\004\046" +
    "\277\001\002\000\004\016\300\001\002\000\014\027\ufff7" +
    "\031\ufff7\043\ufff7\044\ufff7\045\ufff7\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\006\002\003\055\004\001\001\000\002\001" +
    "\001\000\006\003\005\056\006\001\001\000\002\001\001" +
    "\000\012\004\007\006\013\015\012\016\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\013\015\274" +
    "\016\011\001\001\000\010\006\017\017\014\020\015\001" +
    "\001\000\002\001\001\000\016\005\034\007\036\010\035" +
    "\023\037\024\031\057\032\001\001\000\010\006\017\017" +
    "\030\020\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\165\026\043" +
    "\001\001\000\002\001\001\000\012\005\034\007\262\010" +
    "\035\057\032\001\001\000\002\001\001\000\014\005\034" +
    "\007\261\010\035\024\247\057\032\001\001\000\006\025" +
    "\041\026\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\045\026\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\056\012\054\013\055\014\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\017\017\063" +
    "\020\015\001\001\000\050\011\067\023\070\024\031\030" +
    "\071\031\074\032\077\033\115\034\101\035\100\036\073" +
    "\037\076\040\113\041\065\042\064\046\110\047\106\051" +
    "\103\054\114\060\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\027\253\030\126\031\132\001\001\000" +
    "\002\001\001\000\044\024\247\030\071\031\074\032\077" +
    "\033\250\034\101\035\100\036\073\037\076\040\113\041" +
    "\065\042\064\046\110\047\106\051\103\054\114\060\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\165\026\043\001" +
    "\001\000\002\001\001\000\006\025\041\026\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\030\071\031\074\032\077\034\116\035\100\036\073" +
    "\037\076\040\113\041\065\042\064\046\110\047\106\051" +
    "\103\054\114\060\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\027\157\030\126\031" +
    "\132\001\001\000\012\027\131\030\126\031\132\050\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\027" +
    "\155\030\126\031\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\027\136\030\126\031\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\027" +
    "\151\030\126\031\132\001\001\000\010\027\150\030\126" +
    "\031\132\001\001\000\010\027\147\030\126\031\132\001" +
    "\001\000\010\027\146\030\126\031\132\001\001\000\010" +
    "\027\145\030\126\031\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\027" +
    "\131\030\126\031\132\050\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\027\162\030\126\031\132\001\001" +
    "\000\002\001\001\000\040\030\071\031\074\032\077\034" +
    "\164\035\100\036\073\037\076\040\113\041\065\042\064" +
    "\046\110\047\106\051\103\054\114\060\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\027\170\030\126\031\132\001\001\000\002\001\001\000" +
    "\040\030\071\031\074\032\077\034\172\035\100\036\073" +
    "\037\076\040\113\041\065\042\064\046\110\047\106\051" +
    "\103\054\114\060\075\001\001\000\002\001\001\000\040" +
    "\030\071\031\074\032\077\034\174\035\100\036\073\037" +
    "\076\040\113\041\065\042\064\046\110\047\106\051\103" +
    "\054\114\060\075\001\001\000\002\001\001\000\014\006" +
    "\200\027\177\030\126\031\132\053\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\206\052\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\027\215\030\126" +
    "\031\132\001\001\000\010\027\213\030\126\031\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\011\220\023\070\024\031\030" +
    "\071\031\074\032\077\033\115\034\101\035\100\036\073" +
    "\037\076\040\113\041\065\042\064\046\110\047\106\051" +
    "\103\054\114\060\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\027\223\030\126\031\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\043\226\044\227" +
    "\001\001\000\010\006\241\044\240\045\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\032\233\060\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\243\060" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\030" +
    "\071\031\074\032\077\034\116\035\100\036\073\037\076" +
    "\040\113\041\065\042\064\046\110\047\106\051\103\054" +
    "\114\060\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\256\014" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\017\017" +
    "\272\020\015\001\001\000\050\011\273\023\070\024\031" +
    "\030\071\031\074\032\077\033\115\034\101\035\100\036" +
    "\073\037\076\040\113\041\065\042\064\046\110\047\106" +
    "\051\103\054\114\060\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // opcionesEscribeEnt ::= expresion 
            {
              OpcionesEscribeEnt RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesEscribeEnt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // opcionesEscribeEnt ::= epsilon 
            {
              OpcionesEscribeEnt RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesEscribeEnt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // opcionesEscribe ::= STRING 
            {
              OpcionesEscribe RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesEscribe",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // opcionesEscribe ::= epsilon 
            {
              OpcionesEscribe RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opcionesEscribe",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentenciaSalida ::= ESCRIBE_ENT OPEN_KEY opcionesEscribeEnt CLOSE_KEY SEMI_COLON 
            {
              SentenciaSalida RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSalida",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentenciaSalida ::= ESCRIBE OPEN_KEY opcionesEscribe CLOSE_KEY SEMI_COLON 
            {
              SentenciaSalida RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSalida",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sentenciaLlamadaFuncion ::= llamadaFuncion SEMI_COLON 
            {
              SentenciaLlamadaFuncion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaLlamadaFuncion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentenciaMientras ::= MIENTRAS OPEN_KEY expresion CLOSE_KEY sentencia 
            {
              SentenciaMientras RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaMientras",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // porDefecto ::= epsilon 
            {
              PorDefecto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("porDefecto",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // porDefecto ::= PORDEFECTO TWO_POINTS bloque CORTE SEMI_COLON 
            {
              PorDefecto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("porDefecto",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // casoAlt ::= CASO NUMERO TWO_POINTS bloque CORTE SEMI_COLON 
            {
              CasoAlt RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casoAlt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // casosAlternativa ::= casoAlt 
            {
              CasosAlternativa RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casosAlternativa",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // casosAlternativa ::= casosAlternativa casoAlt 
            {
              CasosAlternativa RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casosAlternativa",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentenciaAlternativas ::= ALTENATIVAS OPEN_KEY expresion CLOSE_KEY OPEN_PARENTHESIS casosAlternativa porDefecto CLOSE_PARENTHESIS 
            {
              SentenciaAlternativas RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAlternativas",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentenciaSi ::= SI OPEN_KEY expresion CLOSE_KEY sentencia 
            {
              SentenciaSi RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSi",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentenciaSi ::= SI OPEN_KEY expresion CLOSE_KEY sentencia SINO sentencia 
            {
              SentenciaSi RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaSi",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentenciaAsignacionSuma ::= ref ASSIGN_SUMA expresion SEMI_COLON 
            {
              SentenciaAsignacionSuma RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacionSuma",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ref ::= accesoVector 
            {
              Ref RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ref ::= IDENTIFICADOR 
            {
              Ref RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentenciaAsignacion ::= ref ASSIGN expresion SEMI_COLON 
            {
              SentenciaAsignacion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentenciaIncremento ::= IDENTIFICADOR AUTO_INCREMENTO SEMI_COLON 
            {
              SentenciaIncremento RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIncremento",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentenciaDevuelve ::= DEVUELVE expresion SEMI_COLON 
            {
              SentenciaDevuelve RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaDevuelve",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentenciaDevuelve ::= DEVUELVE SEMI_COLON 
            {
              SentenciaDevuelve RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaDevuelve",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentencia ::= bloque 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentencia ::= sentenciaSalida 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentencia ::= sentenciaLlamadaFuncion 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentencia ::= sentenciaMientras 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentencia ::= sentenciaAlternativas 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentencia ::= sentenciaSi 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentencia ::= sentenciaAsignacionSuma 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentencia ::= sentenciaAsignacion 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentencia ::= sentenciaIncremento 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentencia ::= sentenciaDevuelve 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // listadoSentencias ::= sentencia 
            {
              ListadoSentencias RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoSentencias",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // listadoSentencias ::= listadoSentencias sentencia 
            {
              ListadoSentencias RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoSentencias",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // bloque ::= NT$3 OPEN_PARENTHESIS funcionBloqueF 
            {
              Bloque RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Bloque) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$3 ::= 
            {
              Bloque RESULT =null;

				// Crea ambito del bloque
				String idLexema  = "bloque";								
				ScopeIF scope = scopeManager.openScope(idLexema);
						
				System.out.println("Abriendo ambito: " + scope.getName() + ", Nivel: "+ scope.getLevel());
						
				// Obtenemos la tabla de tipos y la de simbolos 
				SymbolTableIF symbolTable = scope.getSymbolTable();
				TypeTableIF typeTable = scope.getTypeTable();						
						
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parametros ::= expresion COLON parametros 
            {
              Parametros RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametros ::= expresion 
            {
              Parametros RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // llamadaFuncion ::= IDENTIFICADOR OPEN_KEY CLOSE_KEY 
            {
              LlamadaFuncion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // llamadaFuncion ::= IDENTIFICADOR OPEN_KEY parametros CLOSE_KEY 
            {
              LlamadaFuncion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // accesoVector ::= IDENTIFICADOR OPEN_BRACKET expresion CLOSE_BRACKET 
            {
              AccesoVector RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoVector",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= llamadaFuncion 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= accesoVector 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= expresion AND_LOGICA expresion 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= expresion EQUAL expresion 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= expresion LOWER_THAN expresion 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= NEGACION expresion 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= expresion AUTO_INCREMENTO 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= expresion MULT expresion 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= expresion PLUS expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			 		Expresion e = new Expresion(e1, e2);
			 		// comprobacion de tipos de e1 y e2
			 		// generacion de codigo de e1 + e2
			 		// ...
			 		RESULT = e;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= OPEN_KEY expresion CLOSE_KEY 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		        	Expresion e = new Expresion();  // generamos un objeto nuevo del tipo de la parte izq de la regla (en este caso, el antecedente es expresion y su clase Expresion)
		        	RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= NUMERO 
            {
              Expresion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametro ::= IDENTIFICADOR IDENTIFICADOR 
            {
              Parametro RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parametro ::= ENTERO IDENTIFICADOR 
            {
              Parametro RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracionParametros ::= parametro COLON declaracionParametros 
            {
              DeclaracionParametros RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionParametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracionParametros ::= parametro 
            {
              DeclaracionParametros RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionParametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // seccionParametros ::= epsilon 
            {
              SeccionParametros RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionParametros",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // seccionParametros ::= declaracionParametros 
            {
              SeccionParametros RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionParametros",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funcionBloqueF ::= seccionVariables listadoSentencias CLOSE_PARENTHESIS 
            {
              Funcion RESULT =null;
					
					//cerramos ambito 
					ScopeIF scope = scopeManager.getCurrentScope();
					System.out.println("Cerrando ambito: " + scope.getName() + ", Nivel: "+ scope.getLevel());
					scopeManager.closeScope();				
				 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionBloqueF",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funcionBloqueF ::= listadoSentencias CLOSE_PARENTHESIS 
            {
              Funcion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionBloqueF",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // funcion ::= ENTERO IDENTIFICADOR OPEN_KEY seccionParametros CLOSE_KEY OPEN_PARENTHESIS seccionTipos funcionBloqueF 
            {
              Funcion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // funcionPrincipal ::= NT$2 VACIO principal OPEN_KEY CLOSE_KEY OPEN_PARENTHESIS seccionTipos funcionBloqueF 
            {
              FuncionPrincipal RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (FuncionPrincipal) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionPrincipal",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$2 ::= 
            {
              FuncionPrincipal RESULT =null;

						// Crea ambito de la funcion principal
						String idLexema  = "principal";								
						ScopeIF scope = scopeManager.openScope(idLexema);
						
						System.out.println("Abriendo ambito: " + scope.getName() + ", Nivel: "+ scope.getLevel());
						
						// Obtenemos la tabla de tipos y la de simbolos 
						SymbolTableIF symbolTable = scope.getSymbolTable();
						TypeTableIF typeTable = scope.getTypeTable();						
						
				  	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // seccionFunciones ::= funcionPrincipal 
            {
              SeccionFunciones RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionFunciones",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // seccionFunciones ::= funcion seccionFunciones 
            {
              SeccionFunciones RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionFunciones",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // id ::= IDENTIFICADOR ASSIGN NUMERO 
            {
              Id RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // id ::= IDENTIFICADOR 
            {
              Id RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // listadoIDs ::= id 
            {
              ListadoIDs RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIDs",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // listadoIDs ::= id COLON listadoIDs 
            {
              ListadoIDs RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listadoIDs",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracionVariable ::= IDENTIFICADOR listadoIDs SEMI_COLON 
            {
              DeclaracionVariable RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracionVariable ::= ENTERO listadoIDs SEMI_COLON 
            {
              DeclaracionVariable RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariable",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // seccionVariables ::= declaracionVariable 
            {
              SeccionVariables RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionVariables",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // seccionVariables ::= seccionVariables declaracionVariable 
            {
              SeccionVariables RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionVariables",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tamTipo ::= IDENTIFICADOR 
            {
              TamTipo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tamTipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tamTipo ::= NUMERO 
            {
              TamTipo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tamTipo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracionTipo ::= TIPO ENTERO IDENTIFICADOR OPEN_BRACKET tamTipo CLOSE_BRACKET SEMI_COLON 
            {
              DeclaracionTipo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // seccionTipos ::= epsilon 
            {
              SeccionTipos RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionTipos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // seccionTipos ::= declaracionTipo seccionTipos 
            {
              SeccionTipos RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionTipos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracionConstante ::= CONSTANTE IDENTIFICADOR NUMERO SEMI_COLON 
            {
              DeclaracionConstante RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token value = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							
							// Obtenemos el ambito donde nos encontramos y obtenemos la tabla de simbolos 
							ScopeIF scope = scopeManager.getCurrentScope();
							SymbolTableIF tablaSimbolos = scope.getSymbolTable();
							String name = id.getLexema();
							
							// Comprobamos que la constante no este ya declarada en la tabla de simbolos
							if(tablaSimbolos.containsSymbol(name)){
								semanticErrorManager.semanticFatalError("Constante " + name + " ya declarada");								
							}else{
								System.out.println("Constante " + name + " aun NO declarada");
														
								// Introducimos en la tabla de simbolos la constante con su ambito, nombre, tipo y valor
								TypeTableIF tablaTipos = scope.getTypeTable();
								TypeIF tipo = scopeManager.searchType("ENTERO");  // en la pec de referencia las constantes eran todas enteras
								SymbolConstant symbolConstant = new SymbolConstant(scope, name, tipo);
								symbolConstant.setValue(value.getLexema()); // para esto se ha modificado la clase SymbolConstant en semantic.symbol
								tablaSimbolos.addSymbol(symbolConstant);								
							}
					   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstante",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // epsilon ::= 
            {
              Epsilon RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("epsilon",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // seccionConstantes ::= epsilon 
            {
              SeccionConstantes RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionConstantes",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // seccionConstantes ::= declaracionConstante seccionConstantes 
            {
              SeccionConstantes RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionConstantes",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // axiom ::= seccionConstantes seccionTipos seccionFunciones 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // axiom ::= seccionConstantes seccionTipos seccionVariables seccionFunciones 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // initAxiom ::= NT$1 axiom 
            {
              Axiom RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Axiom) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
					
				//cerramos ambito global
				ScopeIF scope = scopeManager.getCurrentScope();
				System.out.println("Cerrando ambito: " + scope.getName() + ", Nivel: "+ scope.getLevel());
				scopeManager.closeScope();				
		     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initAxiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Axiom RESULT =null;

				// Creamos ambito global 
				String idLexema  = "global";								
				ScopeIF scope = scopeManager.openScope(idLexema);
				
				System.out.println("Abriendo ambito: " + scope.getName() + ", Nivel: "+ scope.getLevel());
								
				// Obtenemos la tabla de tipos y la de simbolos 
				SymbolTableIF symbolTable = scope.getSymbolTable();
				TypeTableIF typeTable = scope.getTypeTable();
				
			 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 initAxiom 
            {
              Program RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Program) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   		
  		// No modificar esta estructura, aunque se pueden añadir más acciones semánticas
  		
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);

  		// En caso de no comentarse las dos sentencias anteriores se puede generar una excepcion
  		// en las llamadas a cupTest si el compilador no está completo. Esto es debido a que 
  		// aún no se tendrá implementada la generación de código intermedio ni final.
  		// Para la entrega final deberán descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
  		
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Program RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

